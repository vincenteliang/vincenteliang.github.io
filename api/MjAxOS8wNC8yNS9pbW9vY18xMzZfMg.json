{"title":"Python进阶","date":"2019-04-26T00:00:00.000Z","date_formatted":{"ll":"Apr 26, 2019","L":"04/26/2019","MM-DD":"04-26"},"thumbnail":"https://blog-1251959181.cos.accelerate.myqcloud.com/piano_girl.jpg","link":"2019/04/25/imooc_136_2","comments":true,"tags":["Note","Python"],"categories":["Coding","imooc"],"updated":"2024-07-01T17:57:02.534Z","content":"<p><strong><a href=\"https://www.imooc.com/\" target=\"_blank\">慕课网</a>实战课程笔记 —— <a href=\"https://coding.imooc.com/class/136.html\" target=\"_blank\">全面系统python3入门+进阶课程</a></strong></p>\n<h2 id=\"第九章-面向对象\">第九章 面向对象<a title=\"#第九章-面向对象\" href=\"#第九章-面向对象\"></a></h2>\n<h3 id=\"类的定义\">类的定义<a title=\"#类的定义\" href=\"#类的定义\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 行为：数据成员</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Vincente&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 特征：方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_info</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;name:&#x27;</span> + self.name)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;age:&#x27;</span> + <span class=\"built_in\">str</span>(self.age))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\">student = Student()</span><br><span class=\"line\">student.print_info()</span><br></pre></td></tr></table></figure>\n<p>类是现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起</p>\n<h3 id=\"构造函数\">构造函数<a title=\"#构造函数\" href=\"#构造函数\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 类变量</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 实例变量</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;student &#x27;</span> + name + <span class=\"string\">&#x27; created&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">student = Student(<span class=\"string\">&#x27;Vincente&#x27;</span>, <span class=\"number\">21</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(student.name)      <span class=\"comment\"># Vincente</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(student.__dict__)  <span class=\"comment\"># &#123;&#x27;name&#x27;: &#x27;Vincente&#x27;, &#x27;age&#x27;: &#x27;21&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Student.name)      <span class=\"comment\"># 空</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"self与实例方法\">self与实例方法<a title=\"#self与实例方法\" href=\"#self与实例方法\"></a></h3>\n<p>默认传参self<br>\n实例方法中访问实例变量：<code>self.变量名</code><br>\n实例方法中访问类变量：<code>self.__class__.变量名</code>或<code>类名.变量名</code><br>\n构造函数可以看作是特殊的实例方法</p>\n<h3 id=\"类方法\">类方法<a title=\"#类方法\" href=\"#类方法\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod   //装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plus_sum</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    cls.<span class=\"built_in\">sum</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cls.<span class=\"built_in\">sum</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Student.plus_sum</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态方法\">静态方法<a title=\"#静态方法\" href=\"#静态方法\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以被类或对象调用，可以访问类变量，不需要显式传入cls</p>\n<h3 id=\"成员可见性\">成员可见性<a title=\"#成员可见性\" href=\"#成员可见性\"></a></h3>\n<p>双下划线表示私有<br>\n左右都有双下划线是内置的命名风格，可以在外部访问<br>\n实际是将变量重命名为_Student__score</p>\n<h3 id=\"继承\">继承<a title=\"#继承\" href=\"#继承\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hunam</span>():</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Human&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Human</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, school, name, age</span>):</span><br><span class=\"line\">        self.school = school</span><br><span class=\"line\">        <span class=\"comment\"># Human.__init__(self, name, age)</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Student, self).__init__(name, age)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.(Student, self).test()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Student&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 执行后会打印两行</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第十章-正则表达式与json\">第十章 正则表达式与JSON<a title=\"#第十章-正则表达式与json\" href=\"#第十章-正则表达式与json\"></a></h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">S0 = <span class=\"string\">&#x27;C0C++1Python2&#x27;</span></span><br><span class=\"line\">S1 = <span class=\"string\">&#x27;abc, acc, adc, aec&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;\\d&#x27;</span>, S0)    <span class=\"comment\"># 元字符\\d表示数字</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r)                    <span class=\"comment\"># [&#x27;0&#x27; ,&#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\"># print(S0.index(&#x27;Python&#x27;) &gt; -1)</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;Python&#x27; in S0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符集</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;a[cd]c&#x27;</span>, S1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;acc&#x27; ,&#x27;adc&#x27;]</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;a[^cd]c&#x27;</span>, S1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;abc&#x27; ,&#x27;aec&#x27;]</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;a[b-e]c&#x27;</span>, S1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;abc&#x27; ,&#x27;acc&#x27; ,&#x27;adc&#x27; ,&#x27;aec&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 概括字符集: \\d, \\D, \\w, \\W, \\s, \\S, .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数量词</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;[a-z]&#123;1,6&#125;&#x27;</span>, S0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;C&#x27; ,&#x27;C&#x27;, &#x27;Python&#x27;] 贪婪</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;[a-z]&#123;2,6&#125;?&#x27;</span>, S0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;Py&#x27; ,&#x27;th&#x27;, &#x27;on&#x27;] 非贪婪</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;C+*&#x27;</span>, S0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;C&#x27; ,&#x27;C++&#x27;] *匹配任意次 +匹配非零次 ?匹配0或1次</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;C+*&#x27;</span>, S0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;C++&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 边界匹配 ^: 从开始匹配 $: 从末尾匹配</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 组: 括号扩起来的一段字符  -&gt;中括号是或，小括号是且</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配模式参数flags</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">&#x27;c++&#x27;</span>, S0, re.I)  <span class=\"comment\"># 多个参数用|隔开</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r) <span class=\"comment\"># [&#x27;C++&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.sub(<span class=\"string\">&#x27;C++&#x27;</span>, <span class=\"string\">&#x27;C#&#x27;</span>, S0, <span class=\"number\">0</span>)</span><br><span class=\"line\">s0 = S0.replace(<span class=\"string\">&#x27;C++&#x27;</span>, <span class=\"string\">&#x27;C#&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    matched = value.group()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matched + <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">re.sub(<span class=\"string\">&#x27;C++&#x27;</span>, convert, S0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># match函数: 从字符串首字母开始匹配</span></span><br><span class=\"line\"><span class=\"comment\"># search函数: 搜索第一个</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"json\">JSON<a title=\"#json\" href=\"#json\"></a></h3>\n<p>JSON: JavaScript Object Notation JS对象标记<br>\n一种轻量级的数据<strong>交换格式</strong><br>\n字符串是JSON的表现形式<br>\n符合JSON格式的字符串就叫做JSON字符串</p>\n<ul>\n<li>易于阅读</li>\n<li>易于解析</li>\n<li>网络传输效率高</li>\n<li><strong>跨语言交换数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json_str = <span class=\"string\">&#x27;&#123;&quot;name&quot;: &quot;Vincente&quot;, &quot;age&quot;: 21, &quot;bool&quot;: true&#125;&#x27;</span></span><br><span class=\"line\">json_str = <span class=\"string\">&#x27;[&#123;&quot;name&quot;: &quot;Vincente&quot;&#125;, &#123;&quot;name&quot;: &quot;Dash_Jay&quot;&#125;]&#x27;</span></span><br><span class=\"line\">student = json.loads(json_str)  <span class=\"comment\"># 反序列化，转换成字典/列表</span></span><br><span class=\"line\">json.dumps(<span class=\"built_in\">object</span>)   <span class=\"comment\"># 序列化</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第十一章-枚举\">第十一章 枚举<a title=\"#第十一章-枚举\" href=\"#第十一章-枚举\"></a></h2>\n<p>23种设计模式之单例模式，不实例化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> IntEnum, unique</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># @unique</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VIP</span>(<span class=\"title class_ inherited__\">Enum</span>):</span><br><span class=\"line\">    YELLOW = <span class=\"number\">1</span></span><br><span class=\"line\">    YELLOW_ALIAS = <span class=\"number\">1</span> <span class=\"comment\"># 别名</span></span><br><span class=\"line\">    GREEN = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># 标签名不能重复</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(VIP.GREEN.value)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(VIP.GREEN.name)</span><br><span class=\"line\"><span class=\"comment\"># GREEN</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(VIP.GREEN)</span><br><span class=\"line\"><span class=\"comment\"># VIP.GREEN</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(VIP.GREEN.name))</span><br><span class=\"line\"><span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(VIP.GREEN))</span><br><span class=\"line\"><span class=\"comment\"># &lt;enum &#x27;VIP&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(VIP[<span class=\"string\">&#x27;GREEN&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># VIP.GREEN</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> VIP:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"comment\"># VIP.YELLOW</span></span><br><span class=\"line\"><span class=\"comment\"># VIP.GREEN</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> VIP.__members__:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"comment\"># YELLOW</span></span><br><span class=\"line\"><span class=\"comment\"># YELLOW_ALIAS</span></span><br><span class=\"line\"><span class=\"comment\"># GREEN</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> VIP.__members__.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"comment\"># (&#x27;YELLOW&#x27;, &lt;VIP.YELLOW: 1&gt;)</span></span><br><span class=\"line\"><span class=\"comment\"># (&#x27;YELLOW_ALIAS&#x27;, &lt;VIP.YELLOW: 1&gt;)</span></span><br><span class=\"line\"><span class=\"comment\"># (&#x27;GREEN&#x27;, &lt;VIP.GREEN: 2&gt;)</span></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(VIP(a))</span><br><span class=\"line\"><span class=\"comment\"># VIP.YELLOW</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第十二章-函数式编程\">第十二章 函数式编程<a title=\"#第十二章-函数式编程\" href=\"#第十二章-函数式编程\"></a></h2>\n<h3 id=\"匿名函数/lambda表达式\">匿名函数/lambda表达式<a title=\"#匿名函数/lambda表达式\" href=\"#匿名函数/lambda表达式\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> x, y: x + y</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"map-映射（用做并行运算）\">map 映射（用做并行运算）<a title=\"#map-映射（用做并行运算）\" href=\"#map-映射（用做并行运算）\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">square</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">r = <span class=\"built_in\">map</span>(square, list_x)</span><br></pre></td></tr></table></figure>\n<h3 id=\"map-+-lambda\">map + lambda<a title=\"#map-+-lambda\" href=\"#map-+-lambda\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">list_y = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">r = <span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x*y, list_x, list_y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(r))</span><br><span class=\"line\"><span class=\"comment\"># [4, 6, 6]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce-归约\">reduce 归约<a title=\"#reduce-归约\" href=\"#reduce-归约\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">list_x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">reduce(<span class=\"keyword\">lambda</span> x,y: x+y, list_x, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r)</span><br><span class=\"line\"><span class=\"comment\"># 15   ((((5+1)+2)+3)+4)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\">filter<a title=\"#filter\" href=\"#filter\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_x = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: <span class=\"literal\">True</span> <span class=\"keyword\">if</span> x==<span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"literal\">False</span>, list_x)</span><br><span class=\"line\"><span class=\"comment\"># filter(lambda x: x, list_x)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(r))</span><br><span class=\"line\"><span class=\"comment\"># [1, 1]</span></span><br></pre></td></tr></table></figure>\n<p>返回类型为真/假</p>\n<h3 id=\"装饰器-aop编程思想\">装饰器 AOP编程思想<a title=\"#装饰器-aop编程思想\" href=\"#装饰器-aop编程思想\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decorator</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">*args, **kw</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(time.time())</span><br><span class=\"line\">        func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@decorator</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f1</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;this is a function&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Python基础","link":"2019/04/25/imooc_136_1"},"next":{"title":"正则表达式","link":"2019/03/14/RegEx"},"plink":"https://vincenteliang.com/2019/04/25/imooc_136_2/","toc":[{"id":"第九章-面向对象","title":"第九章 面向对象","index":"1","children":[{"id":"类的定义","title":"类的定义","index":"1.1"},{"id":"构造函数","title":"构造函数","index":"1.2"},{"id":"self与实例方法","title":"self与实例方法","index":"1.3"},{"id":"类方法","title":"类方法","index":"1.4"},{"id":"静态方法","title":"静态方法","index":"1.5"},{"id":"成员可见性","title":"成员可见性","index":"1.6"},{"id":"继承","title":"继承","index":"1.7"}]},{"id":"第十章-正则表达式与json","title":"第十章 正则表达式与JSON","index":"2","children":[{"id":"json","title":"JSON","index":"2.1"}]},{"id":"第十一章-枚举","title":"第十一章 枚举","index":"3"},{"id":"第十二章-函数式编程","title":"第十二章 函数式编程","index":"4","children":[{"id":"匿名函数/lambda表达式","title":"匿名函数&#x2F;lambda表达式","index":"4.1"},{"id":"map-映射（用做并行运算）","title":"map 映射（用做并行运算）","index":"4.2"},{"id":"map-+-lambda","title":"map + lambda","index":"4.3"},{"id":"reduce-归约","title":"reduce 归约","index":"4.4"},{"id":"filter","title":"filter","index":"4.5"},{"id":"装饰器-aop编程思想","title":"装饰器 AOP编程思想","index":"4.6"}]}],"reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2019/04/25/imooc_136_2/\" title=\"Python进阶\">https://vincenteliang.com/2019/04/25/imooc_136_2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"April 26, 2019","updated":"July 1, 2024"},"reading_time":"1248 words in 8 min"}