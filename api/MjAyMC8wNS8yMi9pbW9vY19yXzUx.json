{"title":"Git 学习笔记","date":"2020-05-23T00:00:00.000Z","date_formatted":{"ll":"May 23, 2020","L":"05/23/2020","MM-DD":"05-23"},"thumbnail":"https://blog-1251959181.cos.accelerate.myqcloud.com/cover/git.jpg","link":"2020/05/22/imooc_r_51","comments":true,"tags":["Note"],"categories":["Coding","imooc"],"updated":"2024-07-01T17:57:02.538Z","content":"<p>本文基于 <strong><a href=\"https://www.imooc.com/\" target=\"_blank\">慕课网</a>专栏 —— <a href=\"https://www.imooc.com/read/51\" target=\"_blank\">Git原理详解与实操指南</a></strong> 整理</p>\n<blockquote>\n<p>前一阵GitHub登不上去，而我的所有远端代码都存在GitHub上，由于疫情在家，不能用学校的台式机，导致很多代码无法下载，于是打算把代码推送到GitHub的同时推送到gitlab上做备份，git无论从个人的版本管理还是团队合作的角度讲都是一个很重要的工具，于是决定写一个专题，重点学习一下。</p>\n</blockquote>\n<h2 id=\"入门基础\">入门基础<a title=\"#入门基础\" href=\"#入门基础\"></a></h2>\n<h3 id=\"01-开篇词：为什么要使用-git\">01 开篇词：为什么要使用 Git<a title=\"#01-开篇词：为什么要使用-git\" href=\"#01-开篇词：为什么要使用-git\"></a></h3>\n<blockquote>\n<p>才能一旦让懒惰支配，它就一无可为。 ——克雷洛夫</p>\n</blockquote>\n<p>关于版本控制的重要性我就不啰嗦了，既然你已经在看这篇文章那无须多言，学就好了。</p>\n<p>版本控制器有两大派系：</p>\n<ul>\n<li>分布式版本控制系统：以 Git 为代表</li>\n<li>中央版本控制系统：以 SVN 为代表</li>\n</ul>\n<p>git的功能更丰富，但学习成本也更高</p>\n<h3 id=\"02-环境准备：在各系统中快速安装-git-环境\">02 环境准备：在各系统中快速安装 Git 环境<a title=\"#02-环境准备：在各系统中快速安装-git-环境\" href=\"#02-环境准备：在各系统中快速安装-git-环境\"></a></h3>\n<blockquote>\n<p>机会不会上门来找人，只有人去找机会。 ——狄更斯</p>\n</blockquote>\n<p>git官网：<a href=\"https://git-scm.com/\" target=\"_blank\">https://git-scm.com/</a></p>\n<p>在这里可以下载不同系统的安装包，下载安装即可，写这篇帖子的时候我已经装过了，这里先跳过，网上也有很多教程</p>\n<p>mac系统下还要安装 zsh 和 oh my zsh，目的是更方便的用命令行管理git仓库，不装并不影响使用</p>\n<p>Windows？需要的话私信我。</p>\n<h3 id=\"03-初识git：本地创建一个-git-仓库\">03 初识Git：本地创建一个 Git 仓库<a title=\"#03-初识git：本地创建一个-git-仓库\" href=\"#03-初识git：本地创建一个-git-仓库\"></a></h3>\n<blockquote>\n<p>宝剑锋从磨砺出，梅花香自苦寒来。</p>\n</blockquote>\n<h4 id=\"创建版本库\">创建版本库<a title=\"#创建版本库\" href=\"#创建版本库\"></a></h4>\n<h5 id=\"从0开始\">从0开始<a title=\"#从0开始\" href=\"#从0开始\"></a></h5>\n<p>新建一个文件夹，并在这个文件夹的位置执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>git会在该文件夹下初始化一个<code>.git</code>目录，其中可能包含以下文件：</p>\n<ul>\n<li><strong>HEAD</strong>: 文件指示目前被检出的分支</li>\n<li><strong>description</strong>: 用来显示对仓库的描述信息</li>\n<li><strong>config</strong>: 文件包含项目特有的配置选项</li>\n<li><strong>info</strong>: 目录包含一个全局性排除文件</li>\n<li><strong>hooks</strong>: 目录包含客户端或服务端的钩子脚本</li>\n<li><strong>index</strong>: 文件保存暂存区信息</li>\n<li><strong>objects</strong>: 目录存储所有数据内容</li>\n<li><strong>refs</strong>: 目录存储分支的提交对象的指针</li>\n</ul>\n<h5 id=\"已有项目\">已有项目<a title=\"#已有项目\" href=\"#已有项目\"></a></h5>\n<p>如果需要把已经写了一部分的项目推送到git上，当然可以先给文件夹重命名，然后新建一个额空仓库，再把所有的内容拷贝进去，但是这样显然不是很优雅。</p>\n<p>[TODO]</p>\n<h4 id=\"基础配置\">基础配置<a title=\"#基础配置\" href=\"#基础配置\"></a></h4>\n<h5 id=\"查看配置信息\">查看配置信息<a title=\"#查看配置信息\" href=\"#查看配置信息\"></a></h5>\n<p>在设置昵称和邮箱之前，可以先检查一下之前有没有配置过昵称和邮箱</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<h5 id=\"设置配置信息\">设置配置信息<a title=\"#设置配置信息\" href=\"#设置配置信息\"></a></h5>\n<p>如果执行上面的命令没有返回相应的昵称和邮箱，说明你还没有配置昵称和邮箱。那么就需要进行配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;your username&quot;</span><br><span class=\"line\">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改配置信息\">修改配置信息<a title=\"#修改配置信息\" href=\"#修改配置信息\"></a></h5>\n<p>修改配置的时候是不能通过重复执行上面的命令来修改的。</p>\n<p>如果你多次设置昵称，会在命令执行后提示你无法重复配置或者可能不给你提示，但是这种情况会导致一个 key 配置了多个 value 的问题。</p>\n<h6 id=\"命令行修改\">命令行修改<a title=\"#命令行修改\" href=\"#命令行修改\"></a></h6>\n<p>通过命令行修改的方式比较简单，直接执行以下的命令即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --replace-all user.name &quot;your username&quot;</span><br><span class=\"line\">git config --global --replace-all user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>\n<h6 id=\"修改配置文件\">修改配置文件<a title=\"#修改配置文件\" href=\"#修改配置文件\"></a></h6>\n<p>修改文件的方式，主要是修改位于主目录下<code>.gitconfig</code>文件。</p>\n<p>在 Linux 和 Mac 中，可以通过 vim 命令进行直接编辑，比如 <code>vim ~/.gitconfig</code></p>\n<!-- Windows 系统同样位于用户主目录下，假设你当前的用户是administrator，那么对应的配置文件的路径应该是 C:\\Users\\administrator\\.gitconfig，可以直接使用记事本修改里边的 name 或者 email。 -->\n<p>如果之前已经配置过昵称和邮箱的情况下，当使用 vim 或者记事本打开配置文件之后，可以看到如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">        name = your username</span><br><span class=\"line\">        email = your email</span><br></pre></td></tr></table></figure>\n<p>在如果有重复的 name 或 email，可以将其删掉。</p>\n<p>修改完，通过 git bash 输入<code>git config –list</code>可以查看是否修改成功了。</p>\n<h3 id=\"04-拉取远端代码：使用git命令下载远程仓库到本地\">04 拉取远端代码：使用Git命令下载远程仓库到本地<a title=\"#04-拉取远端代码：使用git命令下载远程仓库到本地\" href=\"#04-拉取远端代码：使用git命令下载远程仓库到本地\"></a></h3>\n<blockquote>\n<p>不要问你的国家能够为你做些什么，而要问你可以为国家做些什么。 ——林肯</p>\n</blockquote>\n<p>首先你需要有一个账号，这里略过，注册时官网都有详细的指引，不论是 <a href=\"https://github.com/\" target=\"_blank\">github</a> <a href=\"https://gitlab.com/\" target=\"_blank\">gitlab</a> 还是 <a href=\"https://gitee.com/\" target=\"_blank\">gitee</a></p>\n<p>登陆账号后新建一个仓库，不要怕错，可以先新建一个名为test的仓库，实践出真知。</p>\n<h4 id=\"https获取远程仓库\">HTTPS获取远程仓库<a title=\"#https获取远程仓库\" href=\"#https获取远程仓库\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 版本库地址 [本地文件夹名称]</span><br></pre></td></tr></table></figure>\n<h4 id=\"ssh拉取\">SSH拉取<a title=\"#ssh拉取\" href=\"#ssh拉取\"></a></h4>\n<p>SSH采用非对称加密，利用公钥和私钥进行鉴权，一次配置永久有效，但是笔者已经配置过了，这里暂时先不复习，感兴趣的小伙伴可以去看<a href=\"https://www.imooc.com/read/51/article/1011\" target=\"_blank\">原文</a>。</p>\n<h3 id=\"05-提交代码：如何把修改后的代码提交到远程仓库\">05 提交代码：如何把修改后的代码提交到远程仓库<a title=\"#05-提交代码：如何把修改后的代码提交到远程仓库\" href=\"#05-提交代码：如何把修改后的代码提交到远程仓库\"></a></h3>\n<blockquote>\n<p>古之立大事者，不唯有超世之才，亦必有坚韧不拔之志。 ——苏轼</p>\n</blockquote>\n<h4 id=\"同步远程代码\">同步远程代码<a title=\"#同步远程代码\" href=\"#同步远程代码\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查改动文件\">检查改动文件<a title=\"#检查改动文件\" href=\"#检查改动文件\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>状态有下面这几种：</p>\n<ul>\n<li>Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code>状态变为<code>Staged</code></li>\n<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作</li>\n<li>deleted： 文件已删除，本地删除，服务器上还没有删除</li>\n<li>renamed：文件名称被改变</li>\n</ul>\n<p>如果发现无意中编辑了某一个文件，需要撤销更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout README.md</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加文件到缓存\">添加文件到缓存<a title=\"#添加文件到缓存\" href=\"#添加文件到缓存\"></a></h4>\n<p>提交指定文件或目录至缓存：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将文件添加至缓存</span></span><br><span class=\"line\">git add index.php</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将/app目录添加至缓存</span></span><br><span class=\"line\">git add app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将所有文件添加至缓存</span></span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交代码\">提交代码<a title=\"#提交代码\" href=\"#提交代码\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit . -m “这是备注信息”</span><br></pre></td></tr></table></figure>\n<p>上方命令中的.是代表选择所有的文件或目录，你也可以提交指定某一个文件，将.换成相应的目录或文件名即可。</p>\n<p>此时你再次使用<code>git status</code>进行查看，会发现没有文件改动列表；因为你已经将改动的文件都提交到版本记录中了；而<code>git status</code>是基于提交的代码最后一个版本比较的，当你提交后，两个区域的文件内容一致。</p>\n<h4 id=\"推送代码\">推送代码<a title=\"#推送代码\" href=\"#推送代码\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"06-查看代码修改：使用-diff-查看修改了哪些代码\">06 查看代码修改：使用 diff 查看修改了哪些代码<a title=\"#06-查看代码修改：使用-diff-查看修改了哪些代码\" href=\"#06-查看代码修改：使用-diff-查看修改了哪些代码\"></a></h3>\n<h4 id=\"名词辨析：工作区-&amp;-暂存区\">名词辨析：工作区 &amp; 暂存区<a title=\"#名词辨析：工作区-&amp;-暂存区\" href=\"#名词辨析：工作区-&amp;-暂存区\"></a></h4>\n<blockquote>\n<p>一句话概括：刚刚编辑的文件在工作区，<code>git add</code>之后在暂存区，<code>git commit</code>之后进入版本库</p>\n</blockquote>\n<h5 id=\"工作区\">工作区<a title=\"#工作区\" href=\"#工作区\"></a></h5>\n<p>当前正在编辑的文件，但还没有修改的内容通过<code>git add</code>命令暂存起来；</p>\n<p>比如我现在修改了<code>index.php</code>文件中的一行代码，没有执行<code>git add index.php</code>命令，那么 <code>index.php</code>便处于工作区状态。</p>\n<h5 id=\"暂存区\">暂存区<a title=\"#暂存区\" href=\"#暂存区\"></a></h5>\n<p>文件修改之后并且通过<code>git add</code>命令临时存储到版本记录里了，但还没有正式通过<code>git commit</code>提交的阶段；</p>\n<p>比如我现在新增一个<code>test.php</code>文件，使用了<code>git add test.php</code>命令，那么此时，<code>test.php</code>文件的改动就已经进入到了暂存区。</p>\n<h4 id=\"比较工作区变动\">比较工作区变动<a title=\"#比较工作区变动\" href=\"#比较工作区变动\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<h4 id=\"比较暂存区变动\">比较暂存区变动<a title=\"#比较暂存区变动\" href=\"#比较暂存区变动\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看工作区与暂存区哪些文件有改动</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看某个文件变动的内容</span></span><br><span class=\"line\">git diff diff.php</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看暂存区与版本库的改动</span></span><br><span class=\"line\">git diff --cached diff.php</span><br></pre></td></tr></table></figure>\n<h4 id=\"与指定记录比较\">与指定记录比较<a title=\"#与指定记录比较\" href=\"#与指定记录比较\"></a></h4>\n<p>通过<code>git log</code>命令，找到历史提交记录的一个 hash 值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">与工作区比较</span></span><br><span class=\"line\">git diff hash值</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">与暂存区比较</span></span><br><span class=\"line\">git diff --cached hash值</span><br></pre></td></tr></table></figure>\n<h4 id=\"与最新版本库比较\">与最新版本库比较<a title=\"#与最新版本库比较\" href=\"#与最新版本库比较\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD</span><br></pre></td></tr></table></figure>\n<p><code>HEAD</code>指的是当前所在的分支名，如果你想比较其他分支也可以将 HEAD 改成其他分支名。</p>\n<h4 id=\"比较两个历史记录\">比较两个历史记录<a title=\"#比较两个历史记录\" href=\"#比较两个历史记录\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff hash值1  hash值2</span><br></pre></td></tr></table></figure>\n<h3 id=\"07-忽略文件权限：解决提示文件权限被修改问题\">07 忽略文件权限：解决提示文件权限被修改问题<a title=\"#07-忽略文件权限：解决提示文件权限被修改问题\" href=\"#07-忽略文件权限：解决提示文件权限被修改问题\"></a></h3>\n<blockquote>\n<p>老骥伏枥，志在千里；烈士暮年，壮心不已。 ——曹操</p>\n</blockquote>\n<p>Git 在进行版本管理的时候，默认将文件权限也包含在内，但很多时候，我们可能并不需要让文件权限保持一致。比如当我们代码发布到生产服务器中，然后修改了某个文件的权限，当我们再次拉取代码时，如果这个文件正好有代码修改，这个时候 Git 就会提示文件冲突。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当前版本库</span></span><br><span class=\"line\">git config core.filemode false</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有的版本库</span></span><br><span class=\"line\">git config --global core.fileMode false</span><br></pre></td></tr></table></figure>\n<h3 id=\"08-忽略指定文件或目录：排除项目配置文件\">08 忽略指定文件或目录：排除项目配置文件<a title=\"#08-忽略指定文件或目录：排除项目配置文件\" href=\"#08-忽略指定文件或目录：排除项目配置文件\"></a></h3>\n<blockquote>\n<p>合理安排时间，就等于节约时间。 ——培根</p>\n</blockquote>\n<p>在Git工作区的根目录下创建一个<code>.gitignore</code>文件，把想忽略的文件名或者目录填进去，Git就会自动忽略这些文件。</p>\n<p>外链：<a href=\"https://blog.csdn.net/liwenfei123/article/details/80155860\" target=\"_blank\">.gitignore 使用场景及书写规则</a></p>\n<p>大部分情况下以下类型会被忽略：</p>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件以及一些编辑器自动生成的文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件；</li>\n</ol>\n<h3 id=\"09-图形工具使用：各系统通过图形管理git代码仓库\">09 图形工具使用：各系统通过图形管理Git代码仓库<a title=\"#09-图形工具使用：各系统通过图形管理git代码仓库\" href=\"#09-图形工具使用：各系统通过图形管理git代码仓库\"></a></h3>\n<blockquote>\n<p>我们有力的道德就是通过奋斗取得物质上的成功；这种道德既适用于国家，也适用于个人。 ——罗素</p>\n</blockquote>\n<p>Mac上很好用的git图形化管理软件：fork</p>\n<h3 id=\"10-分支管理：掌握快速切换分支和新建分支能力\">10 分支管理：掌握快速切换分支和新建分支能力<a title=\"#10-分支管理：掌握快速切换分支和新建分支能力\" href=\"#10-分支管理：掌握快速切换分支和新建分支能力\"></a></h3>\n<blockquote>\n<p>耐心是一切聪明才智的基础。 ——柏拉图</p>\n</blockquote>\n<h4 id=\"为什么要使用分支\">为什么要使用分支<a title=\"#为什么要使用分支\" href=\"#为什么要使用分支\"></a></h4>\n<p>在工作当中，你可能会遇到这样的情况，有一天有人告诉你线上出现紧急 BUG，需要你马上修复并上线。假设我们现在是单分支在管理代码，在有人通知你修复 BUG 之前，你正在开发一个新功能，这个功能还没有开发完成，而且一时半会也没办法开发完，如果你在这个基础上去修复 BUG 并发布到线上去，就会把还没有开发完成的功能发布上去，这样很有可能造成新的问题。</p>\n<h4 id=\"查看分支\">查看分支<a title=\"#查看分支\" href=\"#查看分支\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看本地分支，绿色为当前分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有分支，红色为远程分支</span></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建分支\">新建分支<a title=\"#新建分支\" href=\"#新建分支\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换分支，若分支本地不存在则会去远端拉取</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制当前内容并兴建分支<span class=\"built_in\">test</span>，此时远端没有<span class=\"built_in\">test</span>分支</span></span><br><span class=\"line\">git checkout -b test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将新建的<span class=\"built_in\">test</span>分支推送到远端</span></span><br><span class=\"line\">git push --set-upstream origin test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"合并分支\">合并分支<a title=\"#合并分支\" href=\"#合并分支\"></a></h4>\n<p>假设我们现在有三个分支:</p>\n<ul>\n<li><code>master</code> 生产环境</li>\n<li><code>develop</code> 开发环境</li>\n<li><code>test bug</code> 修复分支</li>\n</ul>\n<p>现在我在<code>test</code>分支中修复了 BUG，需要发布到线上生产服务器上，那么我们就可以通过合并分支的方式将<code>test</code>分支的代码合并到<code>master</code>分支中去。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将<span class=\"built_in\">test</span>分支合并到当前分支</span></span><br><span class=\"line\">git merge test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看合并记录</span></span><br><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除分支\">删除分支<a title=\"#删除分支\" href=\"#删除分支\"></a></h4>\n<p>一般用来修复 BUG 的分支，我们可以把它当做是一个临时分支，当合并到<code>master</code>之后，就可以删除掉它了，这样可以减少 Git 仓库的体积。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">普通删除</span></span><br><span class=\"line\">git branch -d test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">强制删除</span></span><br><span class=\"line\">git branch -D test</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶\">进阶<a title=\"#进阶\" href=\"#进阶\"></a></h2>\n<h3 id=\"11-文件忽略进阶：忽略已加入版本控制器的文件\">11 文件忽略进阶：忽略已加入版本控制器的文件<a title=\"#11-文件忽略进阶：忽略已加入版本控制器的文件\" href=\"#11-文件忽略进阶：忽略已加入版本控制器的文件\"></a></h3>\n<blockquote>\n<p>对自己不满是任何真正有才能的人的根本特征之一。 ——契诃夫</p>\n</blockquote>\n<h4 id=\"忽略文件夹与设置反向排除\">忽略文件夹与设置反向排除<a title=\"#忽略文件夹与设置反向排除\" href=\"#忽略文件夹与设置反向排除\"></a></h4>\n<figure class=\"highlight shell\"><figcaption><span>.gitignore</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test/*</span><br><span class=\"line\">!test/index.php</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略已提交文件\">忽略已提交文件<a title=\"#忽略已提交文件\" href=\"#忽略已提交文件\"></a></h4>\n<p>有的时候，可能一不小心把某一个原本应该忽略的目录提交到了版本控制器中，再使用<code>.gitignore</code>文件去忽略它的时候，发现无论如何都无法再次将其忽略，只好默默忍受；其实这是因为 Git 已经索引了该文件而导致</p>\n<p>遇到这种情况，我们需要先删除掉该文件/文件夹的缓存，才能让它成功忽略，所以正确的操作步骤是先在<code>.gitignore</code>中设置该文件/文件夹为忽略，然后执行删除缓存命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached test/index.php</span><br><span class=\"line\">git rm -r --cached test3/</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-比较分支差异：展示两个分支的差异部分\">12 比较分支差异：展示两个分支的差异部分<a title=\"#12-比较分支差异：展示两个分支的差异部分\" href=\"#12-比较分支差异：展示两个分支的差异部分\"></a></h3>\n<blockquote>\n<p>每个人的生命都是一只小船，理想是小船的风帆。 ——张海迪</p>\n</blockquote>\n<p>查看差异分为两种，具体的代码文件差异，和提交记录的差异；</p>\n<h4 id=\"查看代码差异\">查看代码差异<a title=\"#查看代码差异\" href=\"#查看代码差异\"></a></h4>\n<h5 id=\"查看哪些文件被修改了\">查看哪些文件被修改了<a title=\"#查看哪些文件被修改了\" href=\"#查看哪些文件被修改了\"></a></h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git diff master dev  --<span class=\"built_in\">stat</span></span></span><br><span class=\"line\">index.php | 2 +-</span><br></pre></td></tr></table></figure>\n<p>这个文件与<code>master</code>分支相比增加了一行代码，同时也删除了一行代码</p>\n<h5 id=\"查看某个文件的代码差异\">查看某个文件的代码差异<a title=\"#查看某个文件的代码差异\" href=\"#查看某个文件的代码差异\"></a></h5>\n<p>现在我想知道某一个文件具体被修改了什么内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff master dev index.php</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看全部的代码差异\">查看全部的代码差异<a title=\"#查看全部的代码差异\" href=\"#查看全部的代码差异\"></a></h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff master dev</span><br></pre></td></tr></table></figure>\n<p>这里需要注意，如果你修改的文件比较多，一次查看所有的修改可能会眼花缭乱，适合修改内容不多的情况下使用</p>\n<h4 id=\"查看提交记录差异\">查看提交记录差异<a title=\"#查看提交记录差异\" href=\"#查看提交记录差异\"></a></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 dev 分支中有的记录而在生产分支中没有的记录</span></span><br><span class=\"line\">git log dev ^master</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不管两个分支谁提交的记录多，谁提交的少；而是只想知道两个分支记录有什么不一样</span></span><br><span class=\"line\">git log branch1...branch2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可以在命令中加入--left-right参数，这样在展示每条差异记录的时候，都能看出这条记录所属分支</span></span><br><span class=\"line\">git log --left-right develop...test</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-reset命令：将仓库记录和恢复指定历史位置\">13 reset命令：将仓库记录和恢复指定历史位置<a title=\"#13-reset命令：将仓库记录和恢复指定历史位置\" href=\"#13-reset命令：将仓库记录和恢复指定历史位置\"></a></h3>\n<blockquote>\n<p>加紧学习，抓住中心，宁精勿杂，宁专勿多。 —— 周恩来</p>\n</blockquote>\n<p>有时候我们用<code>git commit</code>提交代码后发现这一次提交的内容是错误的，需要将代码复原</p>\n<p>先找到刚才的<code>commitid</code>也就是哈希值，可以使用<code>git log</code>命令查看到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">撤销最近一次提交</span></span><br><span class=\"line\">git reset HEAD^</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">撤销某一次之后的提交</span></span><br><span class=\"line\">git reset 815ac616803fa89c75467618b2be44f85696543d</span><br></pre></td></tr></table></figure>\n<p>到目前为止虽然 commit 记录已经撤销。</p>\n<p>但是代码其实仍然是没有变化的，我们这里可以使用 git checkout 文件名来撤销文件修改，撤销修改后再通过 git status 去确认当前状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout index.php &amp;&amp; git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-删除过期分支：清理无意义的分支数据\">14 删除过期分支：清理无意义的分支数据<a title=\"#14-删除过期分支：清理无意义的分支数据\" href=\"#14-删除过期分支：清理无意义的分支数据\"></a></h3>\n<blockquote>\n<p>成功的奥秘在于目标的坚定。 ——迪斯雷利</p>\n</blockquote>\n<p>Git 会保留从项目最开始所有的数据，当一个代码仓库长期使用后，会发现代码仓库越来越大，分支也越来越多；这些都会影响到我们 Git 仓库的速度，如果发现一些分支不需要了，我们可以手动删除，以此提高响应速度；</p>\n<h4 id=\"清理远程分支\">清理远程分支<a title=\"#清理远程分支\" href=\"#清理远程分支\"></a></h4>\n<p>很多时候我们删除分支实际上只是在本地将分支删除，但远程依然会存在</p>\n<p>首先查看远程分支列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>远程分支显示颜色为红色，以<code>remotes</code>开头，把需要删除的分支记录下来，然后执行删除远程分支命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete dev</span><br></pre></td></tr></table></figure>\n<p>返回<code>[deleted]</code>等信息，说明我们已经成功将远程分支删除</p>\n<h4 id=\"清理本地分支\">清理本地分支<a title=\"#清理本地分支\" href=\"#清理本地分支\"></a></h4>\n<p>根据分支在远程是否存在作为依据，决定是否将它删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure>\n<p>Git 会将拉取远程的分支信息与本地的进行对比，当发现远程的分支已经删除，便会对本地的分支进行标注；可以使用 Git 的命令查看关联失效的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<p>在分支列表中，<code>test</code>分支后面有一个<code>：gone</code>的标识，说明远程分支已经被删除，通过这个标识我们能够很清晰的知道该需要删除哪些分支:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d test1</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-配置多个远端仓库：把代码推送到不同的服务器\">15 配置多个远端仓库：把代码推送到不同的服务器<a title=\"#15-配置多个远端仓库：把代码推送到不同的服务器\" href=\"#15-配置多个远端仓库：把代码推送到不同的服务器\"></a></h3>\n<blockquote>\n<p>人生太短，要干的事太多，我要争分夺秒。 ——爱迪生</p>\n</blockquote>\n<p>添加一个仓库地址，一次<code>git push</code>同时推送到两个仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url --add origin https://github.com/yourlink.git</span><br></pre></td></tr></table></figure>\n<p>或者直接更改<code>.git/config</code>文件</p>\n<h3 id=\"16-本地覆盖远端：把本地仓库覆盖到远程仓库\">16 本地覆盖远端：把本地仓库覆盖到远程仓库<a title=\"#16-本地覆盖远端：把本地仓库覆盖到远程仓库\" href=\"#16-本地覆盖远端：把本地仓库覆盖到远程仓库\"></a></h3>\n<blockquote>\n<p>学习从来无捷径，循序渐进登高峰。 —— 高永祚</p>\n</blockquote>\n<p>如果无意间将某些重要数据上传到远端（比如数据库配置文件），删除后提交新版本是不够的，因为历史记录里依然可以看到曾经上传上去的内容，这时需要回滚并强制提交</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset your_hash &amp;&amp; git log</span><br><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-远端覆盖本地：把远端代码覆盖本地\">17 远端覆盖本地：把远端代码覆盖本地<a title=\"#17-远端覆盖本地：把远端代码覆盖本地\" href=\"#17-远端覆盖本地：把远端代码覆盖本地\"></a></h3>\n<blockquote>\n<p>读书给人以快乐、给人以光彩、给人以才干。 ——培根</p>\n</blockquote>\n<p><code>git fetch</code>指令只会拉取而不会自动合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"18-恢复已删除的分支：恢复误删除的分支数据\">18 恢复已删除的分支：恢复误删除的分支数据<a title=\"#18-恢复已删除的分支：恢复误删除的分支数据\" href=\"#18-恢复已删除的分支：恢复误删除的分支数据\"></a></h3>\n<blockquote>\n<p>成功＝艰苦的劳动＋正确的方法＋少谈空话。 ——爱因斯坦</p>\n</blockquote>\n<p>显示分支管理操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog show</span><br><span class=\"line\">git branch 分支名称 commit_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"19-比较历史版本差异：比较两个分支下指定版本的区别\">19 比较历史版本差异：比较两个分支下指定版本的区别<a title=\"#19-比较历史版本差异：比较两个分支下指定版本的区别\" href=\"#19-比较历史版本差异：比较两个分支下指定版本的区别\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比较工作区与历史版本</span></span><br><span class=\"line\">git diff commitid</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比较两个历史版本，可以跨分支比较</span></span><br><span class=\"line\">git diff commitid1 commitid12</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比较当前分支与master分支</span></span><br><span class=\"line\">git diff master</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-单独回滚代码：记录不变只回滚代码\">20 单独回滚代码：记录不变只回滚代码<a title=\"#20-单独回滚代码：记录不变只回滚代码\" href=\"#20-单独回滚代码：记录不变只回滚代码\"></a></h3>\n<blockquote>\n<p>人要有毅力，否则将一事无成。 ——居里夫人</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert commitid</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，在使用<code>revert</code>去恢复某个版本代码时，Git 只会撤销指定版本的代码，而不是指定版本后的所有版本。比如说你提交了 1、2、3 三个版本，当你撤销版本 2 的时候，会生成版本 4，但是不会对版本 3 产生影响。</p>\n<!-- ## 团队协作\n\n### 21 merge合并操作：团队协作必备技能\n\n> 耐心是一切聪明才智的基础。 ——柏拉图\n\n> 以我公司为例，有三个分支，develop、test、master三个分支；develop为开发分支，日常在这个分支下开发功能，test分支为功能测试分支，面向测试同事，master分支为生产环境的代码，面向用户；\n> 在接到新功能之后，大家会在 develop 分支下共同开发，觉得没问题之后，会通过git merge将 develop 代码合并到 test 分支中，然后发布到测试服务器，当测试通过后，会再次将 test 分支的代码合并到 master 分支中去。\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout test</span><br><span class=\"line\">git merge develop</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-客户端钩子使用：提交代码时触发事件案例\">22 客户端钩子使用：提交代码时触发事件案例<a title=\"#22-客户端钩子使用：提交代码时触发事件案例\" href=\"#22-客户端钩子使用：提交代码时触发事件案例\"></a></h3>\n<h3 id=\"23-服务端钩子使用：服务端接受推送时事件处理\">23 服务端钩子使用：服务端接受推送时事件处理<a title=\"#23-服务端钩子使用：服务端接受推送时事件处理\" href=\"#23-服务端钩子使用：服务端接受推送时事件处理\"></a></h3>\n<h3 id=\"24-合并代码保留提交记录：rebase功能使用\">24 合并代码保留提交记录：rebase功能使用<a title=\"#24-合并代码保留提交记录：rebase功能使用\" href=\"#24-合并代码保留提交记录：rebase功能使用\"></a></h3>\n<h3 id=\"25-复制记录到当前分支:-cherry-pick命令使用方法\">25 复制记录到当前分支: cherry-pick命令使用方法<a title=\"#25-复制记录到当前分支:-cherry-pick命令使用方法\" href=\"#25-复制记录到当前分支:-cherry-pick命令使用方法\"></a></h3>\n<h3 id=\"26-工作区暂存：-stash解决提示代码未提交问题\">26 工作区暂存： stash解决提示代码未提交问题<a title=\"#26-工作区暂存：-stash解决提示代码未提交问题\" href=\"#26-工作区暂存：-stash解决提示代码未提交问题\"></a></h3>\n<h3 id=\"27-临时任务流程：解决中途需要修复bug的尴尬\">27 临时任务流程：解决中途需要修复BUG的尴尬<a title=\"#27-临时任务流程：解决中途需要修复bug的尴尬\" href=\"#27-临时任务流程：解决中途需要修复bug的尴尬\"></a></h3>\n<h3 id=\"28-代码冲突解决：多人提交代码发生冲突解决方法\">28 代码冲突解决：多人提交代码发生冲突解决方法<a title=\"#28-代码冲突解决：多人提交代码发生冲突解决方法\" href=\"#28-代码冲突解决：多人提交代码发生冲突解决方法\"></a></h3>\n<h3 id=\"29-历史记录清理：保留代码并删除一年前的提交记录\">29 历史记录清理：保留代码并删除一年前的提交记录<a title=\"#29-历史记录清理：保留代码并删除一年前的提交记录\" href=\"#29-历史记录清理：保留代码并删除一年前的提交记录\"></a></h3>\n<h3 id=\"30-搭建git服务器：使用docker快速搭建gitlab---&gt;\">30 搭建Git服务器：使用Docker快速搭建Gitlab --&gt;<a title=\"#30-搭建git服务器：使用docker快速搭建gitlab---&gt;\" href=\"#30-搭建git服务器：使用docker快速搭建gitlab---&gt;\"></a></h3>\n","prev":{"title":"“平安报”自动化折腾日记","link":"2020/05/31/ustb_checkIn_auto"},"next":{"title":"“平安报”提醒服务自动化折腾日记","link":"2020/05/13/ustb_checkIn"},"plink":"https://vincenteliang.com/2020/05/22/imooc_r_51/","reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2020/05/22/imooc_r_51/\" title=\"Git 学习笔记\">https://vincenteliang.com/2020/05/22/imooc_r_51/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"May 23, 2020","updated":"July 1, 2024"},"reading_time":"4682 words in 31 min"}