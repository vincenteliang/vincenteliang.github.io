{"title":"Python基础","date":"2019-04-26T00:00:00.000Z","date_formatted":{"ll":"Apr 26, 2019","L":"04/26/2019","MM-DD":"04-26"},"thumbnail":"https://blog-1251959181.cos.accelerate.myqcloud.com/python.jpg","link":"2019/04/25/imooc_136_1","comments":true,"tags":["Note","Python"],"categories":["Coding","imooc"],"updated":"2024-07-01T17:57:02.534Z","content":"<p><strong><a href=\"https://www.imooc.com/\" target=\"_blank\">慕课网</a>实战课程笔记 —— <a href=\"https://coding.imooc.com/class/136.html\" target=\"_blank\">全面系统python3入门+进阶课程</a></strong></p>\n<p>什么是代码：代码是现实世界事务在计算机世界中的映射<br>\n什么是写代码：写代码是将现实世界中的事务用计算机语言来描述</p>\n<!-- >>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those! -->\n<h2 id=\"第三章-python的基本数据类型\">第三章 python的基本数据类型<a title=\"#第三章-python的基本数据类型\" href=\"#第三章-python的基本数据类型\"></a></h2>\n<h3 id=\"number:-数字\">Number: 数字<a title=\"#number:-数字\" href=\"#number:-数字\"></a></h3>\n<h4 id=\"int:-整数\">int: 整数<a title=\"#int:-整数\" href=\"#int:-整数\"></a></h4>\n<ul>\n<li>\n<p>type(): 返回变量的类型</p>\n</li>\n<li>\n<p>1/1=1.0</p>\n</li>\n<li>\n<p>1//1=1(向下取整)</p>\n</li>\n</ul>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">进制</th>\n<th style=\"text-align:center\">英文</th>\n<th style=\"text-align:center\">表示</th>\n<th style=\"text-align:center\">输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">二进制</td>\n<td style=\"text-align:center\">binary</td>\n<td style=\"text-align:center\">0b1</td>\n<td style=\"text-align:center\">bin()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">八进制</td>\n<td style=\"text-align:center\">octal</td>\n<td style=\"text-align:center\">0o1</td>\n<td style=\"text-align:center\">oct()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">十进制</td>\n<td style=\"text-align:center\">decimal1</td>\n<td style=\"text-align:center\">int()</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">十六进制</td>\n<td style=\"text-align:center\">hexadecimal</td>\n<td style=\"text-align:center\">0x1</td>\n<td style=\"text-align:center\">hex()</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"float:-浮点数\">float: 浮点数<a title=\"#float:-浮点数\" href=\"#float:-浮点数\"></a></h4>\n<p>双精度，相当于其他语言的double</p>\n<h4 id=\"bool:-布尔类型\">bool: 布尔类型<a title=\"#bool:-布尔类型\" href=\"#bool:-布尔类型\"></a></h4>\n<p>True/False: 首字母大写</p>\n<h4 id=\"complex:-复数\">complex: 复数<a title=\"#complex:-复数\" href=\"#complex:-复数\"></a></h4>\n<p>暂时不深究</p>\n<h3 id=\"str:-字符串\">str: 字符串<a title=\"#str:-字符串\" href=\"#str:-字符串\"></a></h3>\n<h4 id=\"单引号-双引号-三引号\">单引号 双引号 三引号<a title=\"#单引号-双引号-三引号\" href=\"#单引号-双引号-三引号\"></a></h4>\n<p>“let’s go” == ‘let's go’</p>\n<p>定义多行字符串: ‘’‘\\n\\n’‘’ 或 “”“\\n\\n”“”</p>\n<p>‘hello<br>\nworld’ == ‘helloworld’</p>\n<h4 id=\"转义字符\">转义字符<a title=\"#转义字符\" href=\"#转义字符\"></a></h4>\n<ul>\n<li>无法“看见”的字符\n<ul>\n<li>\\n 换行</li>\n<li>\\r 回车</li>\n<li>\\t</li>\n</ul>\n</li>\n<li>与语言本身语法有冲突的字符\n<ul>\n<li>'</li>\n<li>\\</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"原始字符串\">原始字符串<a title=\"#原始字符串\" href=\"#原始字符串\"></a></h4>\n<p>在字符串引号前面加<code>r</code>或<code>R</code><br>\nr’/Users/vincente/OneDrive - <a href=\"http://xs.ustb.edu.cn/Markdown\">xs.ustb.edu.cn/Markdown</a> Notes/Python学习笔记.md’</p>\n<h4 id=\"字符串运算\">字符串运算<a title=\"#字符串运算\" href=\"#字符串运算\"></a></h4>\n<p>拼接: ‘str’ + ‘str’<br>\n重复: ‘str’ * int<br>\n报错: ‘str’ * ‘str’<br>\n截取:<br>\n‘str’[int] <em>负数即倒数</em><br>\n‘hello world’[0:5] == ‘hello’<br>\n‘hello world’[:-1] == ‘hello worl’<br>\n‘hello world’[6:] == ‘world’<br>\n<em>若末尾大于字符串长度则截取到最后一位</em></p>\n<h2 id=\"第四章-&quot;组&quot;的概念和定义\">第四章 &quot;组&quot;的概念和定义<a title=\"#第四章-&quot;组&quot;的概念和定义\" href=\"#第四章-&quot;组&quot;的概念和定义\"></a></h2>\n<h3 id=\"列表-list\">列表 list<a title=\"#列表-list\" href=\"#列表-list\"></a></h3>\n<p>内部元素可以是多种类型</p>\n<p>二维数组 = 嵌套列表</p>\n<p>[1,2,3,4][0] == 1<br>\n[1,2,3,4][-1:] == [4]</p>\n<p>拼接: list + list<br>\n重复: list * int</p>\n<h3 id=\"元组-tuple\">元组 tuple<a title=\"#元组-tuple\" href=\"#元组-tuple\"></a></h3>\n<p>(1,‘2’,[3])</p>\n<p>type((1)) == int<br>\ntype((‘1’)) == str</p>\n<p><code>()</code>作为数学运算符的优先级高于元组，(1,),()为元组</p>\n<h3 id=\"序列\">序列<a title=\"#序列\" href=\"#序列\"></a></h3>\n<p>str、list、tuple都是序列</p>\n<p>共有属性/方法：</p>\n<ul>\n<li>序号</li>\n<li>切片: [1,2,3,4][-1:] 或 [1,2,3,4,5,6,7,8][1:6:2]</li>\n<li>+、*</li>\n<li>in: 2 (not) in [1,2,3] == True(False)</li>\n<li>len(): 返回序列长度</li>\n<li>max()/min(): 字符比较ASCII码(<code>ord()</code>方法返回字符的ASCII码)</li>\n</ul>\n<h3 id=\"集合-set\">集合 set<a title=\"#集合-set\" href=\"#集合-set\"></a></h3>\n<ul>\n<li>没有序列索引、切片</li>\n<li>互异</li>\n<li>支持len()、in/not in</li>\n<li>可以求差集<code>-</code>、交集<code>&amp;</code>、并集<code>|</code></li>\n<li>定义空集合: set()</li>\n</ul>\n<h3 id=\"字典-dict\">字典 dict<a title=\"#字典-dict\" href=\"#字典-dict\"></a></h3>\n<ul>\n<li>通过 key 得到/访问 value</li>\n<li>key必须是不可变类型</li>\n</ul>\n<h2 id=\"第五章-变量与运算符\">第五章 变量与运算符<a title=\"#第五章-变量与运算符\" href=\"#第五章-变量与运算符\"></a></h2>\n<p>A = [1,2,3]<br>\n赋值符号<code>=</code></p>\n<h3 id=\"变量命名规则\">变量命名规则<a title=\"#变量命名规则\" href=\"#变量命名规则\"></a></h3>\n<ul>\n<li>首字母不能是数字</li>\n<li>不能使用保留关键字</li>\n</ul>\n<h3 id=\"值类型与引用类型\">值类型与引用类型<a title=\"#值类型与引用类型\" href=\"#值类型与引用类型\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = a</span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"comment\"># b = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"comment\"># b = [2,2]</span></span><br></pre></td></tr></table></figure>\n<p>值类型(不可变): int str tuple<br>\n引用类型(可变): list set dict</p>\n<p>但是元组内的列表是可以被改变的</p>\n<p>改变值类型变量会开辟新内存，而改变可变类型变量内存地址不变</p>\n<h3 id=\"运算符\">运算符<a title=\"#运算符\" href=\"#运算符\"></a></h3>\n<ul>\n<li>算数运算符: +, -, *, /, //, %, **(乘方)<br>\n没有自增、自减运算符</li>\n<li>赋值运算符: =, +=, *=, /=, %=, **=, //=</li>\n<li>比较(关系)运算符: ==, !=, &gt;, &lt;, &lt;=, &gt;=  返回布尔值<br>\n比较字符串时单独比较每个字母的ASCLL码</li>\n<li>逻辑运算符: and, or, not<br>\nnot永远返回布尔值，and、or会返回符合布尔逻辑的操作数\n<ul>\n<li>a and b =&gt; b</li>\n<li>b and a =&gt; a</li>\n<li>a or b =&gt; a</li>\n<li>0 or a =&gt; a</li>\n</ul>\n</li>\n<li>成员运算符: in, not in<br>\n返回布尔值<br>\n可以用于任何列表，包括字符串<br>\n操作字典时对应key</li>\n<li>身份运算符: is, is not<br>\n比较内存地址<br>\na = {1,2,3}, b = {2,1,3}<br>\na == b =&gt; True<br>\na is b =&gt; False</li>\n<li>位运算符: &amp;, |, ^, ~, &lt;&lt;, &gt;&gt;</li>\n</ul>\n<h2 id=\"第六章-分支、循环、条件与枚举\">第六章 分支、循环、条件与枚举<a title=\"#第六章-分支、循环、条件与枚举\" href=\"#第六章-分支、循环、条件与枚举\"></a></h2>\n<h3 id=\"表达式\">表达式<a title=\"#表达式\" href=\"#表达式\"></a></h3>\n<h4 id=\"定义\">定义<a title=\"#定义\" href=\"#定义\"></a></h4>\n<p>表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列</p>\n<h4 id=\"优先级\">优先级<a title=\"#优先级\" href=\"#优先级\"></a></h4>\n<p>同级从左向右解析(左结合)、赋值运算除外</p>\n<p>not &gt; and &gt; or</p>\n<h3 id=\"流程控制\">流程控制<a title=\"#流程控制\" href=\"#流程控制\"></a></h3>\n<h4 id=\"条件控制\">条件控制<a title=\"#条件控制\" href=\"#条件控制\"></a></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> counter &lt;= <span class=\"number\">10</span> :</span><br><span class=\"line\">    conter += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"第七章-包、模块、函数与变量作用域\">第七章 包、模块、函数与变量作用域<a title=\"#第七章-包、模块、函数与变量作用域\" href=\"#第七章-包、模块、函数与变量作用域\"></a></h2>\n<ul>\n<li>一个文件夹是一个包\n<ul>\n<li>包的下面还可以包含子包</li>\n</ul>\n</li>\n<li>一个文件是一个模块\n<ul>\n<li>模块也可以和包平级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"__init__.py:\"><code>__init__.py</code>:<a title=\"#__init__.py:\" href=\"#__init__.py:\"></a></h3>\n<p>要将普通文件夹变成包要在文件夹下新建__init__模块<br>\n包文件夹下的__init__模块的名称就是包名<br>\n引入包或模块的时候__init__会自动执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> FLASK <span class=\"keyword\">import</span> flask  <span class=\"comment\"># 在子包init模块引入变量，父包中需要的模块直接引入子包即可</span></span><br><span class=\"line\">__ALL__: [module]  <span class=\"comment\"># 指定导出的模块</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"引入模块：\">引入模块：<a title=\"#引入模块：\" href=\"#引入模块：\"></a></h3>\n<ul>\n<li>import module_name as nick_name</li>\n<li>from … import …</li>\n</ul>\n<p>引入时会自动执行引入的全部代码，且只执行一次</p>\n<h3 id=\"模块内置变量\">模块内置变量<a title=\"#模块内置变量\" href=\"#模块内置变量\"></a></h3>\n<p>dir函数：返回模块内的所有变量</p>\n<p>普通模块：</p>\n<p><strong>name</strong>: 模块名<br>\n<strong>package</strong>: 模块包名<br>\n<strong>doc</strong>: 模块顶部的多行注释<br>\n<strong>file</strong>: 当前模块在系统中的绝对路径</p>\n<p>入口文件：</p>\n<p><strong>name</strong>: <strong>main</strong><br>\n<strong>package</strong>: None<br>\n<strong>doc</strong>: 模块顶部的多行注释<br>\n<strong>file</strong>: 与执行命令位置的相对路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make a script both importable and excutable</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"相对导入与绝对导入\">相对导入与绝对导入<a title=\"#相对导入与绝对导入\" href=\"#相对导入与绝对导入\"></a></h3>\n<p>绝对导入：import + 绝对路径<br>\n绝对路径要从顶级包开始，顶级包为与入口文件同级的包</p>\n<p>相对导入：from …module import …</p>\n<p>import不能用相对路径<br>\n入口文件不能用相对路径导入，因为相对路径使用__name__定位文件</p>\n<h2 id=\"第八章-函数\">第八章 函数<a title=\"#第八章-函数\" href=\"#第八章-函数\"></a></h2>\n<ol>\n<li>功能性</li>\n<li>隐藏细节</li>\n<li>避免编写重复代码</li>\n</ol>\n<h3 id=\"函数定义\">函数定义<a title=\"#函数定义\" href=\"#函数定义\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">funcname</span>(<span class=\"params\">parameter_list</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>参数列表可以没有</li>\n<li>如果没有return则返回None</li>\n</ul>\n<h3 id=\"多个返回值\">多个返回值<a title=\"#多个返回值\" href=\"#多个返回值\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 链式赋值</span></span><br><span class=\"line\">a=b=c=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 序列解包 unpack</span></span><br><span class=\"line\">a,b,c = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">a,b,c = d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fun</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x1, x2</span><br><span class=\"line\"></span><br><span class=\"line\">x1, x2 = fun()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数类型\">参数类型<a title=\"#参数类型\" href=\"#参数类型\"></a></h3>\n<h4 id=\"必须参数\">必须参数<a title=\"#必须参数\" href=\"#必须参数\"></a></h4>\n<p>参数列表中定义的参数</p>\n<h4 id=\"关键字参数\">关键字参数<a title=\"#关键字参数\" href=\"#关键字参数\"></a></h4>\n<p>funcname(形参=实参)</p>\n<h4 id=\"默认参数\">默认参数<a title=\"#默认参数\" href=\"#默认参数\"></a></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">funcname</span>(<span class=\"params\">形参, 形参=默认值</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>先声明必须参数，再声明有默认值的参数</p>\n<h4 id=\"可变参数\">可变参数<a title=\"#可变参数\" href=\"#可变参数\"></a></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">*形参</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">func(*a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">param1, *param, param2=<span class=\"number\">2</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">demo(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>, param2 = <span class=\"string\">&#x27;param&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"关键字可变参数\">关键字可变参数<a title=\"#关键字可变参数\" href=\"#关键字可变参数\"></a></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">**param</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> param.items():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(key, value)</span><br></pre></td></tr></table></figure>\n<p>会以字典形式存储</p>\n<h3 id=\"变量的作用域\">变量的作用域<a title=\"#变量的作用域\" href=\"#变量的作用域\"></a></h3>\n<p>全局变量<br>\n局部变量<br>\nfor循环的变量可以在外部引用，python没有块级作用域<br>\n作用域链</p>\n<h3 id=\"globle\">globle<a title=\"#globle\" href=\"#globle\"></a></h3>\n<p>在函数中用globle关键字声明全局变量，并可以在外部引入</p>\n","prev":{"title":"Linux常用命令整理","link":"2019/08/05/imooc_l_175"},"next":{"title":"Python进阶","link":"2019/04/25/imooc_136_2"},"plink":"https://vincenteliang.com/2019/04/25/imooc_136_1/","toc":[{"id":"第三章-python的基本数据类型","title":"第三章 python的基本数据类型","index":"1","children":[{"id":"number:-数字","title":"Number: 数字","index":"1.1"},{"id":"str:-字符串","title":"str: 字符串","index":"1.2"}]},{"id":"第四章-\"组\"的概念和定义","title":"第四章 &quot;组&quot;的概念和定义","index":"2","children":[{"id":"列表-list","title":"列表 list","index":"2.1"},{"id":"元组-tuple","title":"元组 tuple","index":"2.2"},{"id":"序列","title":"序列","index":"2.3"},{"id":"集合-set","title":"集合 set","index":"2.4"},{"id":"字典-dict","title":"字典 dict","index":"2.5"}]},{"id":"第五章-变量与运算符","title":"第五章 变量与运算符","index":"3","children":[{"id":"变量命名规则","title":"变量命名规则","index":"3.1"},{"id":"值类型与引用类型","title":"值类型与引用类型","index":"3.2"},{"id":"运算符","title":"运算符","index":"3.3"}]},{"id":"第六章-分支、循环、条件与枚举","title":"第六章 分支、循环、条件与枚举","index":"4","children":[{"id":"表达式","title":"表达式","index":"4.1"},{"id":"流程控制","title":"流程控制","index":"4.2"}]},{"id":"第七章-包、模块、函数与变量作用域","title":"第七章 包、模块、函数与变量作用域","index":"5","children":[{"id":"__init__.py:","title":"__init__.py:","index":"5.1"},{"id":"引入模块：","title":"引入模块：","index":"5.2"},{"id":"模块内置变量","title":"模块内置变量","index":"5.3"},{"id":"相对导入与绝对导入","title":"相对导入与绝对导入","index":"5.4"}]},{"id":"第八章-函数","title":"第八章 函数","index":"6","children":[{"id":"函数定义","title":"函数定义","index":"6.1"},{"id":"多个返回值","title":"多个返回值","index":"6.2"},{"id":"参数类型","title":"参数类型","index":"6.3"},{"id":"变量的作用域","title":"变量的作用域","index":"6.4"},{"id":"globle","title":"globle","index":"6.5"}]}],"reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2019/04/25/imooc_136_1/\" title=\"Python基础\">https://vincenteliang.com/2019/04/25/imooc_136_1/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"April 26, 2019","updated":"July 1, 2024"},"reading_time":"1596 words in 11 min"}