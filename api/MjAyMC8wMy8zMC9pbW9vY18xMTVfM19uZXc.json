{"title":"开发环境与运行环境","date":"2020-03-31T00:00:00.000Z","date_formatted":{"ll":"Mar 31, 2020","L":"03/31/2020","MM-DD":"03-31"},"link":"2020/03/30/imooc_115_3_new","comments":true,"tags":["Front-end","JavaScript","Note"],"categories":["Coding"],"updated":"2024-07-01T17:57:02.534Z","content":"<p><strong><a href=\"https://www.imooc.com/\" target=\"_blank\">慕课网</a>实战课程笔记 —— <a href=\"https://coding.imooc.com/class/115.html\" target=\"_blank\">BAT大牛带你横扫初级前端JavaScript面试（第二版）</a></strong></p>\n<h2 id=\"开发环境\">开发环境<a title=\"#开发环境\" href=\"#开发环境\"></a></h2>\n<h3 id=\"git\">git<a title=\"#git\" href=\"#git\"></a></h3>\n<p>git 常用命令</p>\n<ul>\n<li>git add.</li>\n<li>git checkout xxx</li>\n<li>git commit -m “xxx”</li>\n<li>git push origin master</li>\n<li>git pull origin master</li>\n<li>git branch</li>\n<li>git checkout -b xxx / git checkout xxx</li>\n<li>git merge xxx</li>\n<li>git stash</li>\n<li>git stash pop</li>\n</ul>\n<h3 id=\"调试工具\">调试工具<a title=\"#调试工具\" href=\"#调试工具\"></a></h3>\n<ul>\n<li>elements</li>\n<li>console</li>\n<li>debugger</li>\n<li>network</li>\n<li>application</li>\n</ul>\n<h3 id=\"抓包\">抓包<a title=\"#抓包\" href=\"#抓包\"></a></h3>\n<p>移动端h5页，查看网络请求，需要工具抓包<br>\nWindows 一般用 fiddler<br>\nMac OS 一般用 charles</p>\n<p>手机和电脑连同一个局域网<br>\n将手机代理到电脑上<br>\n手机浏览网页，即可抓包</p>\n<p>查看网络请求<br>\n网址代理<br>\nhttps</p>\n<h3 id=\"webpack-babel\">webpack babel<a title=\"#webpack-babel\" href=\"#webpack-babel\"></a></h3>\n<p>ES6模块化，浏览器不支持<br>\nES6语法，浏览器并不完全支持<br>\n压缩代码，整合代码，以让网页加载更快</p>\n<h3 id=\"linux-常用命令\">linux 常用命令<a title=\"#linux-常用命令\" href=\"#linux-常用命令\"></a></h3>\n<ul>\n<li>公司的线上机器一般都是 Linux</li>\n<li>测试机也需要保持一致，用 Linux</li>\n<li>测试机或者线上机出了问题，本地又不能复现，需要去排查</li>\n</ul>\n<p>登陆线上机器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@192.168.10.21</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行环境\">运行环境<a title=\"#运行环境\" href=\"#运行环境\"></a></h2>\n<ul>\n<li>运行环境即浏览器（ server 端有 node.js ）</li>\n<li>下载网页代码，渲染出页面，期间会执行若干 JS</li>\n<li>要保证代码在浏览器中：稳定且高效</li>\n</ul>\n<h3 id=\"页面加载过程\">页面加载过程<a title=\"#页面加载过程\" href=\"#页面加载过程\"></a></h3>\n<h4 id=\"面试题\">面试题<a title=\"#面试题\" href=\"#面试题\"></a></h4>\n<ol>\n<li>\n<p><strong>从输入 url 到渲染出页面的整个过程</strong><br>\n下载资源：各个资源类型，下载过程<br>\n渲染页面：结合 html css js 图片等</p>\n</li>\n<li>\n<p><strong>window.onload 和 DOMContentLoaded 的区别</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面的全部资源加载完才会执行，包括图片，视频等</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM 渲染完即可执行，此时图片、视频等可能还没有加载完</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"加载资源的形式\">加载资源的形式<a title=\"#加载资源的形式\" href=\"#加载资源的形式\"></a></h4>\n<ul>\n<li>html代码</li>\n<li>媒体文件（图片，视频等）</li>\n<li>JavaScript，CSS</li>\n</ul>\n<h4 id=\"加载资源的过程\">加载资源的过程<a title=\"#加载资源的过程\" href=\"#加载资源的过程\"></a></h4>\n<p>DNS 解析：域名 -&gt; IP地址<br>\n浏览器根据IP地址向服务器发起 http 请求<br>\n服务器处理 http 请求，并返回给浏览器</p>\n<h4 id=\"渲染页面的过程\">渲染页面的过程<a title=\"#渲染页面的过程\" href=\"#渲染页面的过程\"></a></h4>\n<p>根据 HTML 代码生成 DOM Tree<br>\n根据 CSS 代码生成 CSSOM<br>\n将 DOM Tree 和 CSSOM 整合形成 Render Tree</p>\n<p>根据 Render Tree 渲染页面<br>\n遇到 <code>&lt;script&gt;</code> 则暂停渲染，优先加载并执行 JS 代码，完成再继续<br>\n直至把 Render Tree 渲染完成</p>\n<h3 id=\"性能优化-/-体验优化\">性能优化 / 体验优化<a title=\"#性能优化-/-体验优化\" href=\"#性能优化-/-体验优化\"></a></h3>\n<p>是一个综合性问题，没有标准答案，但要求尽量全面<br>\n某些细节问题可能会单独提问：手写防抖、节流<br>\n只关注核心点，针对面试</p>\n<h4 id=\"性能优化原则\">性能优化原则<a title=\"#性能优化原则\" href=\"#性能优化原则\"></a></h4>\n<ul>\n<li>多使用内存、缓存或其他方法</li>\n<li>减少 CPU 计算量，减少网络加载耗时</li>\n<li>适用于所有编程的性能优化 ———— 空间换时间</li>\n</ul>\n<h4 id=\"从何入手\">从何入手<a title=\"#从何入手\" href=\"#从何入手\"></a></h4>\n<ul>\n<li>让加载更快\n<ul>\n<li>减少资源体积：压缩代码</li>\n<li>减少访问次数：合并代码，SSR 服务器渲染，缓存\n<ul>\n<li>多个文件合并成一个</li>\n<li>缓存\n<ul>\n<li>静态资源加 hash 后缀，根据文件内容计算 hash</li>\n<li>文件内容不变，则 hash 不变，则 URL 不变</li>\n<li>url 和文件不变，则会自动触发 http 缓存机制，返回304</li>\n</ul>\n</li>\n<li>SSR\n<ul>\n<li>服务器渲染：将网页和数据一起加载，一起渲染</li>\n<li>非 SSR（前后端分离）：先加载网页，再加载数据，再渲染数据</li>\n<li>早先的 JSP ASP PHP，现在的 vue React SSR</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用更快的网络：CDN</li>\n</ul>\n</li>\n<li>让渲染更快\n<ul>\n<li>CSS 放在 head， JS 放在 body 最下面</li>\n<li>尽早开始执行 JS， 用 DOMContentLoaded 触发</li>\n<li>懒加载（图片懒加载，上滑加载更多）</li>\n<li>对 DOM 查询进行缓存（ for 循环判断条件变量缓存）</li>\n<li>频繁 DOM 操作，合并到一起插入 DOM 结构</li>\n<li>节流 throttle 防抖 debounce</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"防抖-debounce\">防抖 debounce<a title=\"#防抖-debounce\" href=\"#防抖-debounce\"></a></h4>\n<p>监听一个输入框，文字变化后触发 change 事件<br>\n直接用 keyup 事件，则会频繁触发 change 事件<br>\n防抖：用户输入结束或暂停时，才会触发 change 事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟触发 change 事件</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(input.<span class=\"property\">value</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 清空定时器</span></span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span> (fn, delay = <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// timer 是闭包中的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> funciton () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(input.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;), <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"节流-throttle\">节流 throttle<a title=\"#节流-throttle\" href=\"#节流-throttle\"></a></h4>\n<p>拖拽一个元素时，要随时拿到该元素被拖拽的位置<br>\n直接用 drag 事件，则会频繁触发，很容易导致卡顿<br>\n节流：无论拖拽速度多块，都会每隔 100ms 触发一次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span> (fn, delay = <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> funciton () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">&#125;), <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"安全\">安全<a title=\"#安全\" href=\"#安全\"></a></h3>\n<h4 id=\"xss-跨站请求攻击\">xss 跨站请求攻击<a title=\"#xss-跨站请求攻击\" href=\"#xss-跨站请求攻击\"></a></h4>\n<p>一个博客网站，发表一篇博客，其中嵌入 <code>&lt;script&gt;</code> 脚本<br>\n脚本内容：获取 cookie ，发送到我的服务器 （服务器配合跨域）<br>\n发布这篇博客，有人查看它，收割访问者到 cookie</p>\n<p>预防：</p>\n<ul>\n<li>替换特殊字符，如  <code>&lt;</code> 变为 <code>&amp;lt;</code>, <code>&gt;</code> 变为 <code>&amp;gt;</code></li>\n<li><code>&lt;script&gt;</code> 变为 <code>&amp;lt;script&amp;gt;</code> ，直接显示，不会作为脚本执行</li>\n<li>前后端都要替换</li>\n</ul>\n<h4 id=\"xsrf-跨站请求伪造\">xsrf 跨站请求伪造<a title=\"#xsrf-跨站请求伪造\" href=\"#xsrf-跨站请求伪造\"></a></h4>\n<p>正在购物，看中了某个商品，商品id是100<br>\n付费接口是 <code>xxx.com/pay?id=100</code>，但没有任何验证<br>\n攻击者看中了一个商品，id是200</p>\n<p>攻击者向受害者发送一封电子邮件，邮件标题很吸引人<br>\n但邮件正文隐藏着 <code>&lt;img src=&quot;xxx.com/pay?id=200&quot; /&gt;</code><br>\n受害者查看邮件时，就购买了id是200的商品</p>\n<p>预防：</p>\n<ul>\n<li>使用 POST 接口</li>\n<li>增加验证（密码、验证码，指纹等）</li>\n</ul>\n","prev":{"title":"“平安报”提醒服务自动化折腾日记","link":"2020/05/13/ustb_checkIn"},"next":{"title":"JS Web API (新版)","link":"2020/03/26/imooc_115_2_new"},"plink":"https://vincenteliang.com/2020/03/30/imooc_115_3_new/","toc":[{"id":"开发环境","title":"开发环境","index":"1","children":[{"id":"git","title":"git","index":"1.1"},{"id":"调试工具","title":"调试工具","index":"1.2"},{"id":"抓包","title":"抓包","index":"1.3"},{"id":"webpack-babel","title":"webpack babel","index":"1.4"},{"id":"linux-常用命令","title":"linux 常用命令","index":"1.5"}]},{"id":"运行环境","title":"运行环境","index":"2","children":[{"id":"页面加载过程","title":"页面加载过程","index":"2.1"},{"id":"性能优化-/-体验优化","title":"性能优化 &#x2F; 体验优化","index":"2.2"},{"id":"安全","title":"安全","index":"2.3"}]}],"reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2020/03/30/imooc_115_3_new/\" title=\"开发环境与运行环境\">https://vincenteliang.com/2020/03/30/imooc_115_3_new/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"March 31, 2020","updated":"July 1, 2024"},"reading_time":"1471 words in 10 min"}