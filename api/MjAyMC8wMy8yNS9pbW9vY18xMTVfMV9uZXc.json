{"title":"JS基础知识 (新版)","date":"2020-03-26T00:00:00.000Z","date_formatted":{"ll":"Mar 26, 2020","L":"03/26/2020","MM-DD":"03-26"},"thumbnail":"https://blog-1251959181.cos.accelerate.myqcloud.com/js-mobile.gif","link":"2020/03/25/imooc_115_1_new","comments":true,"tags":["Front-end","JavaScript","Note"],"categories":["Coding","imooc"],"updated":"2024-07-01T17:57:02.534Z","content":"<p><strong><a href=\"https://www.imooc.com/\" target=\"_blank\">慕课网</a>实战课程笔记 —— <a href=\"https://coding.imooc.com/class/115.html\" target=\"_blank\">BAT大牛带你横扫初级前端JavaScript面试（第二版）</a></strong></p>\n<!-- ## 知识体系\n\n::: tree\n\n- JS基础语法\n  - 变量类型和计算\n    - 值类型和引用类型\n    - 类型判断\n    - 逻辑运算\n  - 原型和原型链\n    - class\n    - 继承\n    - 原型\n    - 原型链\n    - instanceof\n  - 作用域和闭包\n    - 作用域\n    - 自由变量\n    - 闭包\n    - this\n  - 异步\n    - 单线程\n    - callback\n    - 应用场景\n    - Promise\n  - 模块化\n    - ES6 Module\n- JS-Web-API\n  - DOM\n    - 树形结构\n    - 节点操作\n    - 属性\n    - 树结构操作\n    - 性能\n  - BOM\n    - navigator\n    - screen\n    - location\n    - history\n  - 事件\n    - 绑定\n    - 冒泡\n    - 代理\n  - ajax\n    - XML HttpRequest\n    - 状态码\n    - 跨域\n  - 存储\n    - cookie\n    - localStorage\n    - sessionStorage\n- 开发环境\n  - git\n  - 调试\n  - webpack 和 babel\n  - Linux命令\n- 运行环境\n  - 页面加载\n    - 加载\n    - 渲染\n  - 性能优化\n    - 加载资源优化\n    - 渲染优化\n  - 安全\n    - xss\n    - CSRF\n::: -->\n<h2 id=\"一、变量类型和计算\">一、变量类型和计算<a title=\"#一、变量类型和计算\" href=\"#一、变量类型和计算\"></a></h2>\n<h3 id=\"面试题1\">面试题1<a title=\"#面试题1\" href=\"#面试题1\"></a></h3>\n<ol>\n<li>\n<p><strong>JS 中使用 typeof 能得到那些类型</strong><br>\n详见知识点讲解</p>\n</li>\n<li>\n<p><strong>何时使用 === 何时使用 ==</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.<span class=\"property\">a</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// obj.a === null || obj.a === undefined 的简写</span></span><br><span class=\"line\">    <span class=\"comment\">// jquery源码中写法，其他一律用 ===</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>值类型和引用类型的区别</strong></p>\n</li>\n<li>\n<p><strong>手写深拷贝</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;<span class=\"attr\">a</span>:<span class=\"number\">10</span>, <span class=\"attr\">b</span>:<span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;&#123;&quot;a&quot;:10,&quot;b&quot;:20&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"1、变量类型:-值类型-vs-引用类型\">1、变量类型: 值类型 vs 引用类型<a title=\"#1、变量类型:-值类型-vs-引用类型\" href=\"#1、变量类型:-值类型-vs-引用类型\"></a></h3>\n<h4 id=\"值类型：数字、布尔值、字符串，占用内存较小\">值类型：数字、布尔值、字符串，占用内存较小<a title=\"#值类型：数字、布尔值、字符串，占用内存较小\" href=\"#值类型：数字、布尔值、字符串，占用内存较小\"></a></h4>\n<p>栈中直接存值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>     <span class=\"comment\">// a的内存地址被写入100</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a       <span class=\"comment\">// b的内存地址被写入100</span></span><br><span class=\"line\">a = <span class=\"number\">200</span>         <span class=\"comment\">// 更改a的值并不影响b</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"引用类型：对象、数组、函数，占用内存较大\">引用类型：对象、数组、函数，占用内存较大<a title=\"#引用类型：对象、数组、函数，占用内存较大\" href=\"#引用类型：对象、数组、函数，占用内存较大\"></a></h4>\n<p>栈中存储内存地址指向堆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;    <span class=\"comment\">// 对象被单独存储，a中存放指向对象的指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a           <span class=\"comment\">// 将指针赋给b，a、b同时指向对象的内存地址</span></span><br><span class=\"line\">b.<span class=\"property\">age</span> = <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">age</span>)  <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"typeof-运算符详解\">typeof 运算符详解<a title=\"#typeof-运算符详解\" href=\"#typeof-运算符详解\"></a></h4>\n<ul>\n<li>识别所有值类型</li>\n<li>识别函数</li>\n<li>判断是否是引用类型（不可再细分） instanceof</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO Symbol</span></span><br><span class=\"line\"><span class=\"comment\">// 值类型</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>    <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;abc&#x27;</span>        <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span>          <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>         <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;s&#x27;</span>)  <span class=\"comment\">// symbol</span></span><br><span class=\"line\"><span class=\"comment\">// 引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>         <span class=\"comment\">// object 注意</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>  <span class=\"comment\">// function</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、变量计算\">2、变量计算<a title=\"#2、变量计算\" href=\"#2、变量计算\"></a></h3>\n<h4 id=\"强制类型转换\">强制类型转换<a title=\"#强制类型转换\" href=\"#强制类型转换\"></a></h4>\n<ul>\n<li>字符串拼接\n<ul>\n<li><code>var a = 100 + '10' // '10010'</code></li>\n</ul>\n</li>\n<li>== 运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100</span> == <span class=\"string\">&#x27;100&#x27;</span>        <span class=\"comment\">// true &#x27;100&#x27; == &#x27;100&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">null</span>           <span class=\"comment\">// true false == false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// true false == false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>if 语句: 布尔类型转换\n<ul>\n<li>0, NaN, ‘’, null, undefined 会被转换为 false</li>\n<li>以上为 falsely 变量，其余全部为 truly变量</li>\n</ul>\n</li>\n<li>逻辑运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">0</span>)        <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;&#x27;</span> || <span class=\"string\">&#x27;abc&#x27;</span>)    <span class=\"comment\">// &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(!<span class=\"variable language_\">window</span>.<span class=\"property\">abc</span>)    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、原型和原型链\">二、原型和原型链<a title=\"#二、原型和原型链\" href=\"#二、原型和原型链\"></a></h2>\n<h3 id=\"面试题2\">面试题2<a title=\"#面试题2\" href=\"#面试题2\"></a></h3>\n<ol>\n<li>\n<p><strong>如何准确判断一个变量是数组类型</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>手写一个简易的jQuery，考虑插件和扩展性</strong></p>\n</li>\n<li>\n<p><strong>class的原型本质，怎么理解</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Elem</span> (id) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">elem</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Elem</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">html</span> = <span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"variable language_\">this</span>.<span class=\"property\">elem</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">        elem.<span class=\"property\">innerHTML</span> = val</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>     <span class=\"comment\">// 链式操作</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elem.<span class=\"property\">innerHTML</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Elem</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">on</span> = <span class=\"keyword\">function</span> (<span class=\"params\">type, fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"variable language_\">this</span>.<span class=\"property\">elem</span></span><br><span class=\"line\">    elem.<span class=\"title function_\">addEventListener</span>(type, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Elem</span>(<span class=\"string\">&#x27;div1&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div1.<span class=\"title function_\">html</span>())</span><br><span class=\"line\">div1.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&lt;p&gt;hello world&lt;/p&gt;&#x27;</span>)</span><br><span class=\"line\">div1.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 链式操作写法</span></span><br><span class=\"line\">div1.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&lt;p&gt;hello world&lt;/p&gt;&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"class\">class<a title=\"#class\" href=\"#class\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, number</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">number</span> = number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`姓名: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> ，学号: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.number&#125;</span>`</span>)  <span class=\"comment\">// ES6语法</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(&#x27;姓名: &#x27; + this.name + &#x27;，学号: &#x27; + this.number)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过类 new 对象/实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vincente = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;vincente&#x27;</span>, <span class=\"number\">41724</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(vincente.<span class=\"property\">name</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(vincente.<span class=\"property\">number</span>)</span><br><span class=\"line\">vincente.<span class=\"title function_\">sayHi</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\">继承<a title=\"#继承\" href=\"#继承\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>开动`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">People</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, number</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">number</span> = number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`姓名: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> ，学号: <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.number&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">People</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, major</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">major</span> = major</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">teach</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>教授<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.major&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型\">原型<a title=\"#原型\" href=\"#原型\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class 实际上是函数，可见是语法糖</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">People</span>   <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Student</span>  <span class=\"comment\">// function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐式原型和显式原型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( vincente.<span class=\"property\">__proto__</span> )   <span class=\"comment\">// 隐式原型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )    <span class=\"comment\">//显式原型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( vincente.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> ) <span class=\"comment\">// true，引用的是一个地址</span></span><br></pre></td></tr></table></figure>\n<p>原型关系：</p>\n<ul>\n<li>每个 class 都有显式原型 prototype</li>\n<li>每个实例都有隐式原型 __proto__</li>\n<li>实例的 __proto__ 指向对应 class 的 prototype</li>\n</ul>\n<p>基于原型的执行规则</p>\n<ul>\n<li>获取属性 <a href=\"http://vincente.name\">vincente.name</a> 或执行方法 vincente.sayHi() 时</li>\n<li>先在自身属性和方法中寻找</li>\n<li>如果找不到则自动去  __proto__ 中查找</li>\n</ul>\n<h3 id=\"原型链\">原型链<a title=\"#原型链\" href=\"#原型链\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> )</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title class_\">People</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title class_\">People</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> === <span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> )</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blog-1251959181.cos.accelerate.myqcloud.com/js_yxl.jpg\" alt=\"原型链\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"类型判断-instanceof\">类型判断 instanceof<a title=\"#类型判断-instanceof\" href=\"#类型判断-instanceof\"></a></h3>\n<p><em>左边</em> 顺着原型链向上找能不能找到 <em>右边</em> 的显示原型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vincente <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Student</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">vincente <span class=\"keyword\">instanceof</span> <span class=\"title class_\">People</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\">vincente <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>     <span class=\"comment\">// true</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>    <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、作用域和闭包\">三、作用域和闭包<a title=\"#三、作用域和闭包\" href=\"#三、作用域和闭包\"></a></h2>\n<h3 id=\"面试题3\">面试题3<a title=\"#面试题3\" href=\"#面试题3\"></a></h3>\n<ol>\n<li><strong>this 的不同应用场景，如何取值</strong></li>\n<li><strong>手写 bind 函数</strong></li>\n<li><strong>实际开发中闭包的应用场景，举例说明</strong></li>\n<li><strong>JS创建10个<code>&lt;a&gt;</code>标签，点击的时候弹出对应的序号</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">creatElement</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">    a.<span class=\"property\">innerHTML</span> = i + <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span></span><br><span class=\"line\">    a.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123; <span class=\"comment\">// 该函数在点击时才会执行，如果i在函数外定义打印出来的都是10</span></span><br><span class=\"line\">        e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域和自由变量\">作用域和自由变量<a title=\"#作用域和自由变量\" href=\"#作用域和自由变量\"></a></h3>\n<p>作用域</p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>块级作用域（ES6新增） for if</li>\n</ul>\n<p>自由变量</p>\n<ul>\n<li>一个变量在当前作用域没有定义，但被使用了</li>\n<li>向上级作用域一层一层依次寻找，直至找到为止 <strong>（在定义的地方向上寻找）</strong></li>\n<li>如果到全局作用域都没找到，则报错 xx is not defined</li>\n</ul>\n<h3 id=\"闭包-closure\">闭包 closure<a title=\"#闭包-closure\" href=\"#闭包-closure\"></a></h3>\n<p>作用域应用的特殊情况，有两种表现：</p>\n<h4 id=\"函数作为返回值被返回\">函数作为返回值被返回<a title=\"#函数作为返回值被返回\" href=\"#函数作为返回值被返回\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>() <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"函数作为参数被传递\">函数作为参数被传递<a title=\"#函数作为参数被传递\" href=\"#函数作为参数被传递\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">print</span>(fn) <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<p>闭包：<strong>自由变量的查找，是在函数定义的地方向上级作用域查找，而不是执行的地方</strong></p>\n<h3 id=\"this\">this<a title=\"#this\" href=\"#this\"></a></h3>\n<p>应用场景</p>\n<ul>\n<li>作为普通函数 // window</li>\n<li>使用 call apply bind // 传入什么就是什么</li>\n<li>作为对象方法被调用 // 对象本身</li>\n<li>在 class 方法中调用 // 实例本身</li>\n<li>箭头函数 // 上级作用域</li>\n</ul>\n<p>this 取什么值是在函数执行时候确定的，而不是在定义时候确定的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作为普通函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 call apply bind</span></span><br><span class=\"line\">fn1.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;) <span class=\"comment\">// &#123; x: 100 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn2 = fn1.<span class=\"title function_\">bind</span>(&#123; <span class=\"attr\">x</span>:<span class=\"number\">200</span> &#125;)</span><br><span class=\"line\"><span class=\"title function_\">fn2</span>() <span class=\"comment\">// &#123; x:200 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vincente = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vincente&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 作为对象方法被调用</span></span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 当前对象</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">wait</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// this === window</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数的this会取上级作用域的值</span></span><br><span class=\"line\">    <span class=\"title function_\">waitAgain</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 当前对象</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 class 方法中调用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">People</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> vincente = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;vincente&#x27;</span>)</span><br><span class=\"line\">vincente.<span class=\"title function_\">sayHi</span>() <span class=\"comment\">// vincente 对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四、异步和单线程\">四、异步和单线程<a title=\"#四、异步和单线程\" href=\"#四、异步和单线程\"></a></h2>\n<h3 id=\"面试题4\">面试题4<a title=\"#面试题4\" href=\"#面试题4\"></a></h3>\n<ol>\n<li><strong>同步和异步的区别是什么</strong>\n<ul>\n<li>基于 JS 是单线程语言，异步不会阻塞代码执行，同步会阻塞代码执行</li>\n</ul>\n</li>\n<li><strong>手写用 Promise 加载一张图片</strong></li>\n<li><strong>前端使用异步的场景有哪些</strong></li>\n<li><strong>13542</strong></li>\n</ol>\n<h3 id=\"单线程和异步\">单线程和异步<a title=\"#单线程和异步\" href=\"#单线程和异步\"></a></h3>\n<ul>\n<li>JS是单线程语言，只能同时做一件事</li>\n<li>浏览器和 node.js 已支持 JS 启动进程，如 Web Worker</li>\n<li>JS 和 DOM 渲染共用同一个线程，因为 JS 可以修改 DOM 结构</li>\n<li>遇到等待（网络请求，定时任务）不能卡住</li>\n<li>所以需要异步</li>\n<li>回调 callback 函数</li>\n</ul>\n<h3 id=\"应用场景\">应用场景<a title=\"#应用场景\" href=\"#应用场景\"></a></h3>\n<ul>\n<li>网络请求，如 ajax 图片加载</li>\n<li>定时任务，如 setTimeout, setInterval</li>\n</ul>\n<h3 id=\"callback-hell-和-promise\">callback hell 和 Promise<a title=\"#callback-hell-和-promise\" href=\"#callback-hell-和-promise\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getData</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">            url,</span><br><span class=\"line\">            <span class=\"title function_\">success</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">error</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getData</span>(url1).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data1)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">getData</span>(url2)</span><br><span class=\"line\">&#125;)<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">getData</span>(url3)</span><br><span class=\"line\">&#125;)<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data3</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data3)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err))</span><br></pre></td></tr></table></figure>\n","prev":{"title":"JS Web API (新版)","link":"2020/03/26/imooc_115_2_new"},"next":{"title":"北科大毛概整理2019版","link":"2020/01/03/ustb_marx"},"plink":"https://vincenteliang.com/2020/03/25/imooc_115_1_new/","toc":[{"id":"一、变量类型和计算","title":"一、变量类型和计算","index":"1","children":[{"id":"面试题1","title":"面试题1","index":"1.1"},{"id":"1、变量类型:-值类型-vs-引用类型","title":"1、变量类型: 值类型 vs 引用类型","index":"1.2"},{"id":"2、变量计算","title":"2、变量计算","index":"1.3"}]},{"id":"二、原型和原型链","title":"二、原型和原型链","index":"2","children":[{"id":"面试题2","title":"面试题2","index":"2.1"},{"id":"class","title":"class","index":"2.2"},{"id":"继承","title":"继承","index":"2.3"},{"id":"原型","title":"原型","index":"2.4"},{"id":"原型链","title":"原型链","index":"2.5"},{"id":"类型判断-instanceof","title":"类型判断 instanceof","index":"2.6"}]},{"id":"三、作用域和闭包","title":"三、作用域和闭包","index":"3","children":[{"id":"面试题3","title":"面试题3","index":"3.1"},{"id":"作用域和自由变量","title":"作用域和自由变量","index":"3.2"},{"id":"闭包-closure","title":"闭包 closure","index":"3.3"},{"id":"this","title":"this","index":"3.4"}]},{"id":"四、异步和单线程","title":"四、异步和单线程","index":"4","children":[{"id":"面试题4","title":"面试题4","index":"4.1"},{"id":"单线程和异步","title":"单线程和异步","index":"4.2"},{"id":"应用场景","title":"应用场景","index":"4.3"},{"id":"callback-hell-和-promise","title":"callback hell 和 Promise","index":"4.4"}]}],"reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2020/03/25/imooc_115_1_new/\" title=\"JS基础知识 (新版)\">https://vincenteliang.com/2020/03/25/imooc_115_1_new/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"March 26, 2020","updated":"July 1, 2024"},"reading_time":"1934 words in 13 min"}