{"title":"单片机原理与应用2019","date":"2019-12-29T00:00:00.000Z","date_formatted":{"ll":"Dec 29, 2019","L":"12/29/2019","MM-DD":"12-29"},"thumbnail":"https://blog-1251959181.cos.accelerate.myqcloud.com/cc2530/cc2530.png","link":"2019/12/28/ustb_CC2530","comments":true,"tags":["Note"],"categories":["USTB"],"updated":"2024-07-01T17:57:02.538Z","content":"<style>.red{color:#e64340;}.grey{color:#888888;font-weight:normal}.blue{color:#576b95;}.green{color:#09bb07;}</style>\n<h2 id=\"题型与示例\">题型与示例<a title=\"#题型与示例\" href=\"#题型与示例\"></a></h2>\n<!-- Here is a footnote reference,[^1] and another.[^longnote], and another.^[Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.]\n\n[^1]: Here is the footnote.\n[^longnote]: Here's one with multiple blocks.\nSubsequent paragraphs are indented to show that they -->\n<h3 id=\"单项选择题-(10x2’=20’)\">单项选择题 (10x2’=20’)<a title=\"#单项选择题-(10x2’=20’)\" href=\"#单项选择题-(10x2’=20’)\"></a></h3>\n<p>1 . 单片机最小系统不包括以下哪一项( )</p>\n<p>A. CPU B. LED C. 晶振电路 D. 复位电路</p>\n<details><summary>答案：</summary><p>B<br>\n考点：单片机最小系统的三要素是：电源电路 复位电路 晶振电路<br>\n引申：单片机最小系统应该包含单片机（CPU）</p>\n</details><h3 id=\"简答题-(6x5’=30’)\">简答题 (6x5’=30’)<a title=\"#简答题-(6x5’=30’)\" href=\"#简答题-(6x5’=30’)\"></a></h3>\n<p>1 . IIC总线是一种常见的串行总线，根据以下IIC工作过程图示，说明什么是IIC的总线空闲状态、起始信号、停止信号、数据位信号？</p>\n<details><summary>答案：</summary><ol>\n<li>I2C有2条线，时钟线SCL,数据线SDA</li>\n<li>空闲状态是SDA和SCL都为高电平</li>\n<li>起始信号是SCL为高电平时SDA从高电平拉到低电平</li>\n<li>停止信号是SCL为高电平时SDA从低电平拉到高电平</li>\n<li>数据位信号是在起始信号后开始的，每个比特对应一个周期，前半周期SCL为低电平时发送方在SDA上发送1比特数据，后半周期SCL为高电平接收方在SDA上接收采样该比数据，并且在后半周期数据是一直保持的</li>\n</ol>\n</details><h3 id=\"程序题-(6’+6’+8’+8’+10’+12’=50’)\">程序题 (6’+6’+8’+8’+10’+12’=50’)<a title=\"#程序题-(6’+6’+8’+8’+10’+12’=50’)\" href=\"#程序题-(6’+6’+8’+8’+10’+12’=50’)\"></a></h3>\n<p>1 . (6分)如以下电路图所示，R41连接地，LED2连接到CC2530单片机的P1.0管脚，请编写一个完整的C程序，实现LED2闪烁，要求LED2点亮的时间是熄灭时间的2倍。</p>\n<details><summary>答案：</summary><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ioCC2530.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2 P1_0;  <span class=\"comment\">// P1.0连接LED2</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delay</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">200</span>; j &gt; <span class=\"number\">0</span>; j--);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    P1SEL &amp;= ~<span class=\"number\">0x01</span>; <span class=\"comment\">// 设置P1.0为普通IO口</span></span><br><span class=\"line\">    P1DIR |= <span class=\"number\">0x01</span>;  <span class=\"comment\">// P1.0定义为输出口</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        LED2 = <span class=\"number\">0</span>;   <span class=\"comment\">// 熄灭</span></span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">100</span>); <span class=\"comment\">// 熄灭持续时间</span></span><br><span class=\"line\">        LED2 = <span class=\"number\">1</span>;   <span class=\"comment\">// 点亮</span></span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">200</span>); <span class=\"comment\">// 点亮持续时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details><h2 id=\"chpt-1.-绪论\">Chpt 1. 绪论<a title=\"#chpt-1.-绪论\" href=\"#chpt-1.-绪论\"></a></h2>\n<h3 id=\"1.-嵌入式系统概念\">1. 嵌入式系统概念<a title=\"#1.-嵌入式系统概念\" href=\"#1.-嵌入式系统概念\"></a></h3>\n<ul>\n<li>嵌入式系统就是嵌入到对象体中的专用计算机系统</li>\n<li>嵌入式系统的三要素：嵌入、专用、计算机</li>\n</ul>\n<h4 id=\"嵌入式系统就是嵌入到对象体中的专用计算机系统\">嵌入式系统就是嵌入到对象体中的专用计算机系统<a title=\"#嵌入式系统就是嵌入到对象体中的专用计算机系统\" href=\"#嵌入式系统就是嵌入到对象体中的专用计算机系统\"></a></h4>\n<p>根据IEEE(国际电气和电子工程师协会) 的定义:<br>\n嵌入式系统是“用于控制、监视或者辅助操作机器和设备的装置”(原文为devices used to control, monitor, or assist the operation of equipment, machinery or plants)。</p>\n<h4 id=\"嵌入式系统的三要素：嵌入、专用、计算机\">嵌入式系统的三要素：嵌入、专用、计算机<a title=\"#嵌入式系统的三要素：嵌入、专用、计算机\" href=\"#嵌入式系统的三要素：嵌入、专用、计算机\"></a></h4>\n<ul>\n<li>嵌入性:嵌入到对象体系中，有对象环境要求</li>\n<li>专用性:软、硬件按对象要求裁减</li>\n<li>计算机:实现对象的智能化功能</li>\n</ul>\n<h3 id=\"2.-嵌入式微处理器分类\">2. 嵌入式微处理器分类<a title=\"#2.-嵌入式微处理器分类\" href=\"#2.-嵌入式微处理器分类\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">缩写</th>\n<th style=\"text-align:center\">英文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">微控制器</td>\n<td style=\"text-align:center\">MCU</td>\n<td style=\"text-align:center\">MicroController Unit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">微处理器</td>\n<td style=\"text-align:center\">MPU</td>\n<td style=\"text-align:center\">Embedded MicroProcessor Unit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字信号处理器</td>\n<td style=\"text-align:center\">DSP</td>\n<td style=\"text-align:center\">Digital Signal Processor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">混合处理器和片上系统</td>\n<td style=\"text-align:center\">SOC</td>\n<td style=\"text-align:center\">System On Chip</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可编程片上系统</td>\n<td style=\"text-align:center\">SOPC</td>\n<td style=\"text-align:center\">System On Programmable Chip</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"微控制器（mcu）(microcontroller-unit)\">微控制器（MCU）(MicroController Unit)<a title=\"#微控制器（mcu）(microcontroller-unit)\" href=\"#微控制器（mcu）(microcontroller-unit)\"></a></h4>\n<ul>\n<li>一个系列的微控制器具有多种衍生产品</li>\n<li>单片化、体积大大减小、功耗和成本降低、可靠性提高</li>\n<li>目前嵌入式工业的主流、约占嵌入式系统 70%的份额</li>\n<li>多是8位和16位处理器</li>\n</ul>\n<p>MCU微控制器，总线宽度一般为4位、8 位或16位，处理速度有限，一般在几个MIPS，进行一些复杂的应用很困难，运行操作系统就更难。</p>\n<h4 id=\"微处理器（mpu）(embedded-microprocessor-unit)\">微处理器（MPU）(Embedded MicroProcessor Unit)<a title=\"#微处理器（mpu）(embedded-microprocessor-unit)\" href=\"#微处理器（mpu）(embedded-microprocessor-unit)\"></a></h4>\n<ul>\n<li>功能和微处理器基本一样，是具有32位以上的 处理器,具有较高的性能。</li>\n<li>体积小、功耗小、成本低、抗干扰能力强、可靠性高的特点，有的可提供工业级应用。</li>\n</ul>\n<h4 id=\"数字信号处理器（dsp）(digital-signal-processor)\">数字信号处理器（DSP）(Digital Signal Processor)<a title=\"#数字信号处理器（dsp）(digital-signal-processor)\" href=\"#数字信号处理器（dsp）(digital-signal-processor)\"></a></h4>\n<p>DSP是运算密集处理器，一般用在快速执行算法，做控制比较困难。为了追求高执行效率，不适合运行操作系统，核心代码使用汇编。</p>\n<h4 id=\"混合处理器和片上系统（soc）(system-on-chip)\">混合处理器和片上系统（SOC）(System On Chip)<a title=\"#混合处理器和片上系统（soc）(system-on-chip)\" href=\"#混合处理器和片上系统（soc）(system-on-chip)\"></a></h4>\n<ul>\n<li>结构简洁</li>\n<li>体积小、功耗低</li>\n<li>可靠性高</li>\n<li>设计生产效率高</li>\n</ul>\n<h4 id=\"可编程片上系统（sopc）(system-on-programmable-chip)\">可编程片上系统（SOPC）(System On Programmable Chip)<a title=\"#可编程片上系统（sopc）(system-on-programmable-chip)\" href=\"#可编程片上系统（sopc）(system-on-programmable-chip)\"></a></h4>\n<ul>\n<li>采用超深亚微米工艺技术</li>\n<li>使用一个以上的嵌入式处理器/DSP</li>\n<li>设计方式灵活</li>\n<li>可裁减、可扩充、可升级</li>\n<li>软硬件在系统可编程的功能</li>\n</ul>\n<h3 id=\"3.-嵌入式软件的开发模式\">3. 嵌入式软件的开发模式<a title=\"#3.-嵌入式软件的开发模式\" href=\"#3.-嵌入式软件的开发模式\"></a></h3>\n<ul>\n<li>需要使用交叉编译器，进行交叉开发</li>\n<li>交叉编译器(Cross-compiler)：是一种运行在通用计算机上的、但是能够生成在另一种处理器上运行的目标代码的编译器。</li>\n<li>交叉开发：在一台通用计算机上进行软件的编辑、编译，然后下载到嵌入式系统中运行调试。</li>\n</ul>\n<h2 id=\"chpt-2.-单片机基础\">Chpt 2. 单片机基础<a title=\"#chpt-2.-单片机基础\" href=\"#chpt-2.-单片机基础\"></a></h2>\n<h3 id=\"1.-单片机基础知识\">1. 单片机基础知识<a title=\"#1.-单片机基础知识\" href=\"#1.-单片机基础知识\"></a></h3>\n<h4 id=\"单片机定义\">单片机定义<a title=\"#单片机定义\" href=\"#单片机定义\"></a></h4>\n<p>单片微型计算机(Single-Chip Microcomputer)简称单片机。它不是完成某一个逻辑功能的芯片，而是把一个计算机系统集成到一个芯片上。</p>\n<h4 id=\"单片机内部结构\">单片机内部结构<a title=\"#单片机内部结构\" href=\"#单片机内部结构\"></a></h4>\n<ol>\n<li>中央处理器</li>\n<li>存储器</li>\n<li>输入设备和输出设备</li>\n<li>串行通信</li>\n<li>时钟电路</li>\n<li>中断控制系统</li>\n<li>定时器/计数器</li>\n</ol>\n<h4 id=\"单片机内部三大资源\">单片机内部三大资源<a title=\"#单片机内部三大资源\" href=\"#单片机内部三大资源\"></a></h4>\n<ul>\n<li>FLASH(程序存储空间ROM)</li>\n<li>RAM(内存)</li>\n<li>SFR(特殊功能寄存器)</li>\n</ul>\n<h4 id=\"单片机采用harvard结构的优点\">单片机采用Harvard结构的优点<a title=\"#单片机采用harvard结构的优点\" href=\"#单片机采用harvard结构的优点\"></a></h4>\n<p>拥有独立的指令总线和数据总线，可以让取指与数据访问分开进行，提高了执行效率。</p>\n<h4 id=\"单片机选型的原则\">单片机选型的原则<a title=\"#单片机选型的原则\" href=\"#单片机选型的原则\"></a></h4>\n<ol>\n<li>技术性:要从单片机的技术指标角度,对单片机芯片进行选择,以保证单片机应用系统在一定的技术指标下可靠运行;</li>\n<li>实用性:要从单片机的供货渠道、信誉程序等角度，对单片机的生产厂家进行选择以保证单片机应用系统在能长期、可靠运行;</li>\n<li>可开发性:选用的单片机要有可靠的可以开发手段，如程序开发工具、仿真调试手段等</li>\n</ol>\n<h4 id=\"常见单片机封装\">常见单片机封装<a title=\"#常见单片机封装\" href=\"#常见单片机封装\"></a></h4>\n<ul>\n<li><a href=\"https://baike.baidu.com/item/DIP/443840?fr=aladdin\" target=\"_blank\">DIP(Dual In-line Package)双列直插式封装</a></li>\n<li><a href=\"https://baike.baidu.com/item/QFN%E5%B0%81%E8%A3%85/5168878?fr=aladdin\" target=\"_blank\">QFN(Quad Flat No-lead Package )，方形扁平无引脚封装</a></li>\n<li><a href=\"https://baike.baidu.com/item/QFP/909936?fr=aladdin\" target=\"_blank\">QFP(Quad Flat Package) 方型扁平式封装</a></li>\n</ul>\n<h3 id=\"2.-单片机最小系统:-电源电路、复位电路、晶振电路\">2. 单片机最小系统: 电源电路、复位电路、晶振电路<a title=\"#2.-单片机最小系统:-电源电路、复位电路、晶振电路\" href=\"#2.-单片机最小系统:-电源电路、复位电路、晶振电路\"></a></h3>\n<h4 id=\"电源电路\">电源电路<a title=\"#电源电路\" href=\"#电源电路\"></a></h4>\n<p>常用单片机的电源系统有5V系统和3.3V系统这两种。</p>\n<h4 id=\"复位电路\">复位电路<a title=\"#复位电路\" href=\"#复位电路\"></a></h4>\n<p>复位电路需要接到接到了单片机的RST(Reset)复位引脚上。单片机复位一般是3种情况: 上电复位、手动复位、程序自动复位。</p>\n<h4 id=\"晶振电路\">晶振电路<a title=\"#晶振电路\" href=\"#晶振电路\"></a></h4>\n<p>晶振，又叫晶体振荡器，他起到的作用是为单片机系统提供基准时钟信号。单片机内部所有的工作都是以这个时钟信号为步调基准来进行工作的。</p>\n<h4 id=\"晶振频率、机器周期、指令周期的关系，(cc2530,标准51）\">晶振频率、机器周期、指令周期的关系，(CC2530,标准51）<a title=\"#晶振频率、机器周期、指令周期的关系，(cc2530,标准51）\" href=\"#晶振频率、机器周期、指令周期的关系，(cc2530,标准51）\"></a></h4>\n<ul>\n<li>标准51单片机基本时序周期\n<ul>\n<li>振荡周期/时钟周期：Tc=晶振频率fosc（或外加频率）的倒数</li>\n<li>状态周期：Ts=2个时钟周期(Tc)（很少用到此概念）</li>\n<li>机器周期：CPU完成一个基本操作所需的时间称为机器周期</li>\n<li>指令周期: 执行一条指令所需的机器周期™数，是MCS-51单片机最大的时序单位。通常含有1～4个机器周期。</li>\n</ul>\n</li>\n<li>换算关系\n<ul>\n<li>振荡周期 = 晶振频率fosc的倒数</li>\n<li>1个状态周期 = 2个振荡周期</li>\n<li>1个机器周期 = 12个振荡周期 = 6个状态周期</li>\n<li>1个指令周期 = 1、2、4个机器周期</li>\n</ul>\n</li>\n<li>CC2530指令周期与标准51不同\n<ul>\n<li>CC2530包含一个单周期的增强51内核，不同于标准51</li>\n</ul>\n</li>\n</ul>\n<details><summary>举例：若MCS-51单片机外接晶振为12MHz，则:</summary><ul>\n<li>振荡周期 = 1/12MHz=(1/12)μs =0.0833μs</li>\n<li>状态周期 = 1/6μs=0.167μs</li>\n<li>机器周期 = 1μs</li>\n<li>指令周期 = 1~4μs</li>\n</ul>\n</details><h3 id=\"3.-cc2530编程入门\">3. CC2530编程入门<a title=\"#3.-cc2530编程入门\" href=\"#3.-cc2530编程入门\"></a></h3>\n<h4 id=\"led限流电阻\">LED限流电阻<a title=\"#led限流电阻\" href=\"#led限流电阻\"></a></h4>\n<p>LED要求电流范围是1~20mA的话，就可以根据欧姆定律R=U/I，把这个电阻的上限和下限值求出来。</p>\n<h4 id=\"c51常用数据类型\">C51常用数据类型<a title=\"#c51常用数据类型\" href=\"#c51常用数据类型\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">关键字</th>\n<th style=\"text-align:center\">所占位数</th>\n<th style=\"text-align:center\">表示数的范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">无符号字符型</td>\n<td style=\"text-align:center\">unsigned char</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">0 ~ 255</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">有符号字符型</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-128 ~ 127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">无符号整型</td>\n<td style=\"text-align:center\">unsigned int</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">0 ~ 65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">有符号整型</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">-32768 ~ 32767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">无符号长整型</td>\n<td style=\"text-align:center\">unsigned long</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">0 ~ 2<sup>32</sup>-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">有符号长整型</td>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">-2<sup>31</sup> ~ 2<sup>31</sup>-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单精度实型</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">3.4e-38 ~ 3.4e38</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">双精度实型</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">1.7e-308 ~ 1.7e308</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">位类型</td>\n<td style=\"text-align:center\">bit</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0 ~ 1</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"非精确延时\">非精确延时<a title=\"#非精确延时\" href=\"#非精确延时\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++);</span><br><span class=\"line\"><span class=\"comment\">// 使用while循环</span></span><br><span class=\"line\">i=<span class=\"number\">100</span>; <span class=\"keyword\">while</span>(i--);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelayMS</span><span class=\"params\">(uint msec)</span> </span>&#123;</span><br><span class=\"line\">    uint i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;msec; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">535</span>; j++);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"asm(&quot;nop&quot;)\">asm(“NOP”)<a title=\"#asm(&quot;nop&quot;)\" href=\"#asm(&quot;nop&quot;)\"></a></h4>\n<p>可以利用库函数<code>_nop_();</code>实现精确延时<br>\nNOP - <code>asm(&quot;NOP&quot;)</code>占用1个机器周期</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delay</span><span class=\"params\">(uint time)</span> </span>&#123; </span><br><span class=\"line\">    uint i;</span><br><span class=\"line\">    uchar j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; time; i++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">240</span>; j++) &#123;   </span><br><span class=\"line\">            <span class=\"built_in\">asm</span>(<span class=\"string\">&quot;NOP&quot;</span>); <span class=\"comment\">// asm是内嵌汇编</span></span><br><span class=\"line\">            <span class=\"built_in\">asm</span>(<span class=\"string\">&quot;NOP&quot;</span>); <span class=\"comment\">// nop是空操作</span></span><br><span class=\"line\">            <span class=\"built_in\">asm</span>(<span class=\"string\">&quot;NOP&quot;</span>); <span class=\"comment\">// 执行一个指令周期</span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"cc2530的四种内存空间(code/data/xdata/sfr)\">CC2530的四种内存空间(Code/Data/XData/SFR)<a title=\"#cc2530的四种内存空间(code/data/xdata/sfr)\" href=\"#cc2530的四种内存空间(code/data/xdata/sfr)\"></a></h4>\n<ul>\n<li><strong>CODE</strong>: 程序存储器，有16根地址总线，寻址范围是0000H~FFFFH 共64KB。</li>\n<li><strong>DATA</strong>: 一种读/写数据存储器空间，可由单周期CPU指令直接或间接访问。这个内存空间处理256字节。数据存储器空间的低128字节可以直接或间接寻址，高128字节只能间接寻址。</li>\n<li><strong>XDATA</strong>: 一种读/写数据存储器空间，通常需要4-5个CPU指令周期才能访问。此内存空间地址为64KB。对XDATA内存的访问也比DATA访问慢，因为代码和扩展数据内存空间在CPU核心上共享一条公共总线，因此不能与扩展数据访问并行执行从代码中预取指令。</li>\n<li><strong>SFR</strong>: 读/写寄存器存储器空间，可由一条CPU指令直接存取。这个内存空间由128个字节组成。对于地址可被8整除的sfr寄存器，每个位也可单独寻址。</li>\n</ul>\n<h3 id=\"4.-gpio编程\">4. GPIO编程<a title=\"#4.-gpio编程\" href=\"#4.-gpio编程\"></a></h3>\n<h4 id=\"gpio相关的sfr\">GPIO相关的SFR<a title=\"#gpio相关的sfr\" href=\"#gpio相关的sfr\"></a></h4>\n<p>特殊功能寄存器(SFR)存放控制单片机内部器件的命令、数据或运行过程中的一些信息。例如，通过已配置好的P1_1口向外输出高电平可用以下代码实现。<br>\n<code>P1=0x02;</code>或者<code>P1_1=1;</code></p>\n<p><strong>与CC2530的I/O口有关的主要SFR</strong></p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Px</td>\n<td style=\"text-align:center\">端口数据，用来控制端口的输出或获取端口的输入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PERCFG</td>\n<td style=\"text-align:center\">外设控制，用来选择外设功能在I/O口上的设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APCFG</td>\n<td style=\"text-align:center\">模拟外设I/O设置，用来配置P0都作为模拟I/O口使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxSEL</td>\n<td style=\"text-align:center\">端口功能选择，用来设置端口是通用I/O还是外设I/O</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxDIR</td>\n<td style=\"text-align:center\">端口方向，当端口为通用I/O时，用来设置数据传输方向</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxINP</td>\n<td style=\"text-align:center\">端口输入模式，当端口为通用I/O时，用来选择输入模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxIFG</td>\n<td style=\"text-align:center\">端口中断状态标志，使用外部中断时，用来表示是否有中断</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PICTL</td>\n<td style=\"text-align:center\">端口中断控制，使用外部中断时，用来配置端口中断触发类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxIEN</td>\n<td style=\"text-align:center\">端口中断屏蔽，用来选择是否使用外部中断功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PMUX</td>\n<td style=\"text-align:center\">掉电信号，用来输出32kHz时钟信号或内部数字稳压状态</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"px,-pxsel,-pxdir,-pxinp\">Px, PxSEL, PxDIR, PxINP<a title=\"#px,-pxsel,-pxdir,-pxinp\" href=\"#px,-pxsel,-pxdir,-pxinp\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">SFR</th>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PxSEL</td>\n<td style=\"text-align:center\">7:0</td>\n<td style=\"text-align:center\">PxSEL[7:0]</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">0:对应端口为通用I/O功能<br>1:对应端口为外设I/O功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxDIR</td>\n<td style=\"text-align:center\">7:0</td>\n<td style=\"text-align:center\">PxDIR[7:0]</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">设置Px_7到Px_0端口的传输方向<br>0:输入   1:输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PxINP</td>\n<td style=\"text-align:center\">7:0</td>\n<td style=\"text-align:center\">MDPx_[7:0]</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">设置Px_7到Px_0端口的I/O输入模式<br>0:上拉/下拉   1:三态</td>\n</tr>\n</tbody>\n</table></div></div><p>P2INP寄存器的输入模定义</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">MDP2</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">为端口2的所有引脚选择上拉或下拉<br>0:上拉    1:下拉</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">MDP1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">为端口1的所有引脚选择上拉或下拉<br>0:上拉    1:下拉</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">MDP0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">为端口0的所有引脚选择上拉或下拉<br>0:上拉    1:下拉</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4:0</td>\n<td style=\"text-align:center\">MDP2_[4:0]</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">设置P2_4到P2_0端口的I/O输入模式<br>0:上拉或下拉    1:下拉</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"&lt;text-class='red'&gt;gpio输出编程典型过程&lt;/text&gt;\"><text class='red'>GPIO输出编程典型过程</text><a title=\"#&lt;text-class='red'&gt;gpio输出编程典型过程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;gpio输出编程典型过程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 将I/O口配置成通用I/O功能(PxSEL)</span></span><br><span class=\"line\"><span class=\"comment\">// 例如：将P1_0、P1_1、P1_3和P1_4设置成通用I/O，即相应的bit置0</span></span><br><span class=\"line\">P1SEL &amp;=~<span class=\"number\">0x1B</span>; <span class=\"comment\">//0001 1101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将端口的数据传输方向配置成输出（ PxDIR ）</span></span><br><span class=\"line\"><span class=\"comment\">// 例如：将P1_0、P1_1、P1_3和P1_4设置成输出口，即相应的bit置1</span></span><br><span class=\"line\">P1DIR |=<span class=\"number\">0x1B</span>; <span class=\"comment\">//0001 1101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 在端口上输出高(低)电平</span></span><br><span class=\"line\">P1_0=<span class=\"number\">1</span>;</span><br><span class=\"line\">P1_1=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"&lt;text-class='red'&gt;gpio输入编程典型过程&lt;/text&gt;\"><text class='red'>GPIO输入编程典型过程</text><a title=\"#&lt;text-class='red'&gt;gpio输入编程典型过程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;gpio输入编程典型过程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 将I/O口配置成通用I/O功能(PxSEL)</span></span><br><span class=\"line\">P1SEL &amp;= ~<span class=\"number\">0x05</span>; <span class=\"comment\">// 设置P1_0和P1_2为通用I/O,即相应的bit置0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将端口的数据传输方向配置成输入（ PxDIR ）</span></span><br><span class=\"line\">P1DIR &amp;=~<span class=\"number\">0x04</span>; <span class=\"comment\">// 设置P1_2为输入口，即相应的bit置0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 配置输入端口的状态（PxINP）</span></span><br><span class=\"line\">P1INP &amp;=~<span class=\"number\">0x04</span>; <span class=\"comment\">// 设置P1_2为上拉或下拉</span></span><br><span class=\"line\">P2INP &amp;=~<span class=\"number\">0x40</span>; <span class=\"comment\">// 设置P1口所有引脚使用上拉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 在输入端口上读取电平值</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(P1_2 == <span class=\"number\">0</span>) <span class=\"comment\">// 判断按键被按下</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"按键消抖\">按键消抖<a title=\"#按键消抖\" href=\"#按键消抖\"></a></h4>\n<ul>\n<li>硬件电容消抖</li>\n<li>软件消抖</li>\n</ul>\n<p>最简单的消抖原理，就是当检测到按键状态变化后，先等待一个10ms左右的延时时间，让抖动消失后再进行一次按键状态检测，如果与刚才检测到的状态相同，就可以确认按键已经稳定的动作了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(SW1 == <span class=\"number\">0</span>) &#123;          <span class=\"comment\">// 判断按键被按下</span></span><br><span class=\"line\">    <span class=\"built_in\">DelayMS</span>(<span class=\"number\">10</span>);        <span class=\"comment\">// 为消抖进行延时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(SW1 == <span class=\"number\">0</span> ) &#123;     <span class=\"comment\">// 经过延时后按键仍处在按下状态</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!SW1);    <span class=\"comment\">// 等待按键松开</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-3.-外部中断和定时器\">Chpt 3. 外部中断和定时器<a title=\"#chpt-3.-外部中断和定时器\" href=\"#chpt-3.-外部中断和定时器\"></a></h2>\n<h3 id=\"1.-中断相关概念\">1. 中断相关概念<a title=\"#1.-中断相关概念\" href=\"#1.-中断相关概念\"></a></h3>\n<h4 id=\"中断的定义\">中断的定义<a title=\"#中断的定义\" href=\"#中断的定义\"></a></h4>\n<p>“中断”是指CPU在执行当前程序时，由于系统中出现某种急需处理的情况，CPU暂停正在执行的程序，转而执行别一段特殊程序来处理出现的紧急事务，处理结束后，CPU自动返回原先暂停的程序中继续执行。<br>\n这种程序在执行过程中由于外界的原因而被打断的情况称为中断。</p>\n<h4 id=\"中断的作用\">中断的作用<a title=\"#中断的作用\" href=\"#中断的作用\"></a></h4>\n<p>中断使计算机系统具备应对突发事件的能力，提高了CPU的工作效率。<br>\n如果没有中断系统，CPU就只能按照程序编写的先后次序，对各个外设进行依次查询和处理，即轮询工作方式。<br>\n轮询方式貌似公平，但实际工作效率很低，且不能及时响应紧急事件。</p>\n<h4 id=\"中断源、中断向量\">中断源、中断向量<a title=\"#中断源、中断向量\" href=\"#中断源、中断向量\"></a></h4>\n<p>引起中断的原因，或发生中断申请的来源。单片机一般具有多个中断源，如外部中断、定时器/计数器中断、ADC中断等。</p>\n<p>中断向量TODO</p>\n<h4 id=\"中断嵌套\">中断嵌套<a title=\"#中断嵌套\" href=\"#中断嵌套\"></a></h4>\n<p>当有多个中断源向CPU提出中断请求时，中断系统采用中断嵌套的方式依次处理各个中断源的中断请求。</p>\n<h3 id=\"2.-cc2530外部中断\">2. CC2530外部中断<a title=\"#2.-cc2530外部中断\" href=\"#2.-cc2530外部中断\"></a></h3>\n<h4 id=\"外部中断相关sfr\">外部中断相关SFR<a title=\"#外部中断相关sfr\" href=\"#外部中断相关sfr\"></a></h4>\n<p>（1）使能端口组(port)的中断功能</p>\n<p>CC2530中的每个中断源都有一个中断功能开关，要使用某个中断源的中断功能，必须使能其中断功能。要使能P0、P1和P2端口的外部中断功能，需要通过IEN1和IEN2特殊功能寄存器。</p>\n<h5 id=\"ien1寄存器的描述\">IEN1寄存器的描述<a title=\"#ien1寄存器的描述\" href=\"#ien1寄存器的描述\"></a></h5>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7:6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">不使用，读为0</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">P0IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">端口0中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">T4IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">定时器4中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">T3IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">定时器3中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">T2IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">定时器2中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">T1IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">定时器1中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">DMAIE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">DMA传输中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"ien2寄存器的描述\">IEN2寄存器的描述<a title=\"#ien2寄存器的描述\" href=\"#ien2寄存器的描述\"></a></h5>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7:6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">不使用，读为0</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">WDTIE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">看门狗定时器中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">P1IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">端口1中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">UTX1IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">USART1发送中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">UTX0IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">USART0发送中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">P2IE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">端口2中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">RFIE</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">RF一般中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n</tbody>\n</table></div></div><p>（2）使能端口中某些位(引脚)的中断功能，屏蔽其他位</p>\n<p>使能端口组的中断功能后，还需要设置当前端口组中哪几个引脚具有外部中断功能，将不需要使用外部中断的引脚<br>\n屏蔽掉。使用Px_IEN寄存器。<br>\n例：使能P1_2端口中断，需要将P1IEN寄存器的第2位置1。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P1IEN2 |= <span class=\"number\">0x10</span>; <span class=\"comment\">//使能P1_2口中断</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"p0ien和p1ien寄存器的描述\">P0IEN和P1IEN寄存器的描述<a title=\"#p0ien和p1ien寄存器的描述\" href=\"#p0ien和p1ien寄存器的描述\"></a></h5>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7:0</td>\n<td style=\"text-align:center\">Px_[7:0]IEN</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">端口Px_7到Px_0中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"p2ien寄存器的描述\">P2IEN寄存器的描述<a title=\"#p2ien寄存器的描述\" href=\"#p2ien寄存器的描述\"></a></h5>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7:6</td>\n<td style=\"text-align:center\">Px_[7:0]IEN</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">未使用</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">DPIEN</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">USB D+中断使能</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4:0</td>\n<td style=\"text-align:center\">P2_[4:0]IEN</td>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">端口Px_7到Px_0中断使能</td>\n<td style=\"text-align:center\">中断禁止</td>\n<td style=\"text-align:center\">中断使能</td>\n</tr>\n</tbody>\n</table></div></div><p>（3）设置中断触发方式</p>\n<p>要求按键按下一次后执行暂停或继续跑马灯显示，SW1在按下过程中会使电信号产生下降沿跳变，松开过程中使电信号产生上升沿跳变。需要捕捉按键按下的状态，故选择将P1_2口设置为下降沿触发方式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PICTL |= <span class=\"number\">0x02</span>; <span class=\"comment\">// P1_3到P1_2口下降沿触发中断</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"pictl寄存器的描述\">PICTL寄存器的描述<a title=\"#pictl寄存器的描述\" href=\"#pictl寄存器的描述\"></a></h5>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">PADSC</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">控制I/O口的引脚输出模式下的驱动能力</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6:4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">未使用</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">P2ICON</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">P2_4到P2_0中断触发方式选择</td>\n<td style=\"text-align:center\">上升沿触发</td>\n<td style=\"text-align:center\">下降沿触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">P1ICONH</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">P1_7到P1_4中断触发方式选择</td>\n<td style=\"text-align:center\">上升沿触发</td>\n<td style=\"text-align:center\">下降沿触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">P1ICONL</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">P1_3到P1_0中断触发方式选择</td>\n<td style=\"text-align:center\">上升沿触发</td>\n<td style=\"text-align:center\">下降沿触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">P0ICONL</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">P0_7到P0_0中断触发方式选择</td>\n<td style=\"text-align:center\">上升沿触发</td>\n<td style=\"text-align:center\">下降沿触发</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"中断处理函数\">中断处理函数<a title=\"#中断处理函数\" href=\"#中断处理函数\"></a></h4>\n<p>CPU响应中断后，会中断正在执行的主程序代码，转而执行相应的中断处理函数。因此，要使用中断功能，还必须编写中断处理函数。</p>\n<h4 id=\"&lt;text-class='red'&gt;按键中断编程&lt;/text&gt;\"><text class='red'>按键中断编程</text><a title=\"#&lt;text-class='red'&gt;按键中断编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;按键中断编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = P0INT_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">P0_ISR</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( P0IFG &amp; <span class=\"number\">0x10</span> ) &#123;            <span class=\"comment\">//按键P0.4中断</span></span><br><span class=\"line\">        <span class=\"built_in\">Delay</span>(<span class=\"number\">10</span>);                  <span class=\"comment\">//延时去抖</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(P0_4==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Key2Value = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Key1Value = !Key1Value;  <span class=\"comment\">//产生中断保存中断状态</span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    P0IFG &amp;= ~ <span class=\"number\">0x10</span>;                <span class=\"comment\">//清Pin中断标志</span></span><br><span class=\"line\">    P0IF = <span class=\"number\">0</span>;                       <span class=\"comment\">//清端口0中断标志</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"3.-cc2530定时器\">3. CC2530定时器<a title=\"#3.-cc2530定时器\" href=\"#3.-cc2530定时器\"></a></h3>\n<h4 id=\"定时器工作原理\">定时器工作原理<a title=\"#定时器工作原理\" href=\"#定时器工作原理\"></a></h4>\n<p>定时器/计数器最基本的工作原理是计数。<br>\n定时器/计数器的核心是一个计数器，可以进行加1(或减1)计数，每出现一个计数信号，计数器就自动加1(或自动减1)。当计数值从最大值变成0(或从0变成最大值)溢出时，定时器/计数器便向CPU提出中断请求。<br>\n计数信号的来源可选择周期性的内部时钟信号(如定时功能)或非周期性的外界输入信号(如计数功能)。</p>\n<h4 id=\"定时器1的三种工作模式\">定时器1的三种工作模式<a title=\"#定时器1的三种工作模式\" href=\"#定时器1的三种工作模式\"></a></h4>\n<ol>\n<li>自由运行模式<br>\n计数器从0x0000开始，在每个活动时钟边沿增加1，当计数器达到0xFFFF时溢出，计数器重新载入0x0000并开始新一轮的递增计数</li>\n<li>模模式<br>\n计数器从0x0000开始，在每个活动时钟边沿增加1，当计数器达到T1CC0寄存器保存的值时溢出，计数器将复位到0x0000并开始新一轮递增计数</li>\n<li>正计数/倒计数模式<br>\n计数器反复从0x0000开始，正计数到T1CC0保存的最终计数值，然后倒计时返回0x0000</li>\n</ol>\n<div style=\"width:100%;display:flex;flex-direction:row;\">\n    <image style='width:33%' src='https://blog-1251959181.file.myqcloud.com/cc2530/cc2530_counter1.png' />\n    <image style='width:33%' src='https://blog-1251959181.file.myqcloud.com/cc2530/cc2530_counter2.png' />\n    <image style='width:33%' src='https://blog-1251959181.file.myqcloud.com/cc2530/cc2530_counter3.png' />\n</div>\n<h4 id=\"定时器1的sfr\">定时器1的SFR<a title=\"#定时器1的sfr\" href=\"#定时器1的sfr\"></a></h4>\n<p>TODO</p>\n<!-- 必考：定时时间的计算 up/down模式下定时0.5s -->\n<h4 id=\"&lt;text-class='red'&gt;定时器1定时的中断方式编程(up/down)&lt;/text&gt;\"><text class='red'>定时器1定时的中断方式编程(up/down)</text><a title=\"#&lt;text-class='red'&gt;定时器1定时的中断方式编程(up/down)&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;定时器1定时的中断方式编程(up/down)&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定时器1初始化函数</span></span><br><span class=\"line\"><span class=\"comment\">//系统不配置工作时钟时,默认使用内部RC振荡,即16MHz</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitT1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    T1CTL |= <span class=\"number\">0x0c</span>;  <span class=\"comment\">//128分频</span></span><br><span class=\"line\">                    <span class=\"comment\">//每隔0.5s会产生一个中断请求</span></span><br><span class=\"line\">    T1CC0L = <span class=\"number\">0x12</span>;  <span class=\"comment\">//设置最大计数数值的低8位。</span></span><br><span class=\"line\">    T1CC0H = <span class=\"number\">0x7A</span>;  <span class=\"comment\">//设置最大计数数值的高8位。</span></span><br><span class=\"line\">    T1OVFIM = <span class=\"number\">1</span>;    <span class=\"comment\">//使能定时器1溢出中断，可不写</span></span><br><span class=\"line\">    T1IE = <span class=\"number\">1</span>;       <span class=\"comment\">//使能定时器1中断</span></span><br><span class=\"line\">    EA = <span class=\"number\">1</span>;         <span class=\"comment\">//开全局中断</span></span><br><span class=\"line\">    T1CTL |= <span class=\"number\">0x03</span>;  <span class=\"comment\">//设置Up/down模式，计数开始</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器1的中断处理函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector=T1_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">T1_INT</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    T1STAT &amp;= ~<span class=\"number\">0x20</span>;        <span class=\"comment\">//清除定时器1溢出中断标志位</span></span><br><span class=\"line\">    IRCON= ;                <span class=\"comment\">//清除Timer中断标志T1IF ，可不写硬件自动清零</span></span><br><span class=\"line\">    t1_count++;             <span class=\"comment\">//定时器1溢出次数加1，溢出周期为0.5s</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t1_count ==<span class=\"number\">3</span>) &#123;      <span class=\"comment\">//如果溢出次数达到3说明经过了1.5s</span></span><br><span class=\"line\">        LED1=<span class=\"number\">1</span>;             <span class=\"comment\">//点亮LED1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t1_count ==<span class=\"number\">4</span>) &#123; <span class=\"comment\">//如果溢出次数达到4说明经过了2s</span></span><br><span class=\"line\">        LED1=<span class=\"number\">0</span>;             <span class=\"comment\">//熄灭LED1</span></span><br><span class=\"line\">        t1_count=<span class=\"number\">0</span>;         <span class=\"comment\">//清零定时器1溢出次数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-4.-串行通讯协议(uart/spi/i2c)\">Chpt 4. 串行通讯协议(UART/SPI/I2C)<a title=\"#chpt-4.-串行通讯协议(uart/spi/i2c)\" href=\"#chpt-4.-串行通讯协议(uart/spi/i2c)\"></a></h2>\n<h3 id=\"1.-uart-异步\">1. UART 异步<a title=\"#1.-uart-异步\" href=\"#1.-uart-异步\"></a></h3>\n<h4 id=\"uart连接\">UART连接<a title=\"#uart连接\" href=\"#uart连接\"></a></h4>\n<ul>\n<li>串口通信连接包括两线，发送和接收双方交叉连接:\n<ul>\n<li>RXD(Receive Data，RXD)，表示接收数据</li>\n<li>TXD(Transmit Data，TXD)，表示发送数据。</li>\n</ul>\n</li>\n<li>另外，如果用到流控制，还需要\n<ul>\n<li>RTS(Request To Send，RTS)表示请求发送，</li>\n<li>CTS(Clear To Send，CTS)表示清除发送。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"uart协议及时序图\">UART协议及时序图<a title=\"#uart协议及时序图\" href=\"#uart协议及时序图\"></a></h4>\n<p>串口通信的每一帧数据由起始位(低电平)、数据位、奇偶校验位(可选)、停止位(高电平)组成。</p>\n<h4 id=\"uart波特率概念\">UART波特率概念<a title=\"#uart波特率概念\" href=\"#uart波特率概念\"></a></h4>\n<p>波特率表示每秒钟传送的码元符号的个数，它用单位时间内载波调制状态改变的次数来表示。单位:码元/s，所以它与比特率是不同的概念</p>\n<h4 id=\"uart配置参数\">UART配置参数<a title=\"#uart配置参数\" href=\"#uart配置参数\"></a></h4>\n<ol>\n<li>串口号</li>\n<li>波特率</li>\n<li>数据位</li>\n<li>停止位</li>\n<li>校验位</li>\n<li>流控制</li>\n</ol>\n<p>例如：COM6,115200,8,1,N,N</p>\n<h4 id=\"cc2530的uart相关sfr\">CC2530的UART相关SFR<a title=\"#cc2530的uart相关sfr\" href=\"#cc2530的uart相关sfr\"></a></h4>\n<p>UxDBUF寄存器是双缓冲的寄存器。当数据缓冲器寄存器UxDBUF写入数据时，该字节发送到输出引脚TXDx。UART接收到的数据存放在UxDBUF，通过读取寄存器UxDBUF获得接收到的数据字节。</p>\n<ol>\n<li>UART发送<br>\n当USART收/发数据缓冲器UxDBUF写入数据时，UART发送启动。该字节发送到输出引脚TXDx。寄存器UxDBUF是双缓冲器。当字节传送开始时，UxCSR.ACTIVE位设置为1，而当字节传送结束时，UxCSR.ACTIVE位清零。<br>\n当传送结束时，UxCSR.TX_BYTE位设置为1。当UxDBUF寄存器就绪，准备接收新的发送数据时，就产生了一个中断请求。该中断在传送开始之后立刻发生，因此当字节正在发送时，新的数据字节能够装入数据缓冲器。</li>\n<li>UART接收<br>\n当1写入UxCSR.RE位时，在UART上数据接收就开始了。然后UART会在输入引脚RXDx中寻找有效起始位，并且设置UxCSR.ACTIVE位为1。当检测出有效起始位时，收到的字节就传入接收寄存器。UxCSR.RX_BYTE位设置为1。该操作完成时，产生接收中断。同时，UxCSR.ACTIVE位设置为0。通过寄存器UxDBUF提供收到的数据字节。当UxDBUF读出时，UxCSR.RX_BYTE位由硬件清零。</li>\n</ol>\n<h4 id=\"&lt;text-class='red'&gt;cc2530的uart发送及接收编程&lt;/text&gt;\"><text class='red'>CC2530的UART发送及接收编程</text><a title=\"#&lt;text-class='red'&gt;cc2530的uart发送及接收编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;cc2530的uart发送及接收编程&lt;/text&gt;\"></a></h4>\n<p>中断方式实现串口发送的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使能串口发送</span></span><br><span class=\"line\">IEN2 |= <span class=\"number\">0x04</span>; <span class=\"comment\">//开USART0发送(TX)中断</span></span><br><span class=\"line\">EA = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = UTX0_VECTOR</span></span><br><span class=\"line\">__interrupt <span class=\"type\">void</span> <span class=\"built_in\">UART0TX_ISR</span>(<span class=\"type\">void</span>) &#123;</span><br><span class=\"line\">    txNext = <span class=\"number\">1</span>;</span><br><span class=\"line\">    UTX0IF = <span class=\"number\">0</span>; <span class=\"comment\">// 清中断标志</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送字符串函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">UartTX_Send_String</span><span class=\"params\">(<span class=\"type\">char</span> *Data,<span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;len;i++) &#123;</span><br><span class=\"line\">        txNext = <span class=\"number\">0</span>；</span><br><span class=\"line\">        U0DBUF = *Data++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(txNext == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中断方式实现串口接收的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IEN0 |= <span class=\"number\">0x84</span>; <span class=\"comment\">//开总中断允许接收(RX)中断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = URX0_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">UART0RX_ISR</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    URX0IF = <span class=\"number\">0</span>; <span class=\"comment\">// 清中断标志</span></span><br><span class=\"line\">    RxBuf = U0DBUF; <span class=\"comment\">//取出接收到字节</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.-spi-高速\">2. SPI 高速<a title=\"#2.-spi-高速\" href=\"#2.-spi-高速\"></a></h3>\n<h4 id=\"spi连接\">SPI连接<a title=\"#spi连接\" href=\"#spi连接\"></a></h4>\n<p>标准的四线SPI接口:<br>\n– SSEL:片选，也写做SSN，从设备片选使能信号<br>\n– SCLK:时钟，也写作SCK，由主机产生，和SCL类似<br>\n– MOSI:主机输出从机输入，Master Output/Slave Input，主机给从机发送指令或者数据的通道<br>\n– MISO:主机输入从机输出，Master Input/Slave Output，主机读取从机的状态或者数据的通道</p>\n<h4 id=\"spi协议及时序图\">SPI协议及时序图<a title=\"#spi协议及时序图\" href=\"#spi协议及时序图\"></a></h4>\n<h4 id=\"spi时钟极性及时钟相位\">SPI时钟极性及时钟相位<a title=\"#spi时钟极性及时钟相位\" href=\"#spi时钟极性及时钟相位\"></a></h4>\n<p>CPOL:Clock Polarity，即时钟极性。空闲状态为高电平，则CPOL=1，空闲状态为低电平，则CPOL=0。<br>\nCPHA:Clock Phase，即时钟相位。CPHA=1表示数据的输出是在一个时钟周期的第一个沿。CPHA=0表示数据的采样是在一个时钟周期的第一个沿</p>\n<h4 id=\"cc2530的spi相关sfr\">CC2530的SPI相关SFR<a title=\"#cc2530的spi相关sfr\" href=\"#cc2530的spi相关sfr\"></a></h4>\n<p>TODO</p>\n<h4 id=\"&lt;text-class='red'&gt;cc2530的spi通讯编程&lt;/text&gt;\"><text class='red'>CC2530的SPI通讯编程</text><a title=\"#&lt;text-class='red'&gt;cc2530的spi通讯编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;cc2530的spi通讯编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"><span class=\"comment\">// IO初始化函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Initial_IO</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    P0DIR |= <span class=\"number\">0xff</span>;     <span class=\"comment\">//P0定义为输出</span></span><br><span class=\"line\">    P1DIR |= <span class=\"number\">0xff</span>;     <span class=\"comment\">//P1定义为输出</span></span><br><span class=\"line\">    P2DIR |= <span class=\"number\">0x01</span>;     <span class=\"comment\">//P2.0定义为输出</span></span><br><span class=\"line\">    P0 &amp;= ~<span class=\"number\">0xE0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// CC2530 Master Mode</span></span><br><span class=\"line\">    PERCFG |= <span class=\"number\">0x02</span>;\t\t<span class=\"comment\">// 使用USART1(location 2)</span></span><br><span class=\"line\">    P1SEL |= <span class=\"number\">0xE0</span>;\t\t<span class=\"comment\">// P1_5 SLK, P1_6 MOSI, P1_7 MISO</span></span><br><span class=\"line\">    P1SEL &amp;= ~<span class=\"number\">0x10</span>;\t\t<span class=\"comment\">// 设置(P1_4)SSN为GPIO功能</span></span><br><span class=\"line\">    P1DIR |= <span class=\"number\">0x10</span>;\t\t<span class=\"comment\">// 设置片选输出</span></span><br><span class=\"line\">\t<span class=\"comment\">// 设置SPI时钟波特率为最大</span></span><br><span class=\"line\">    U1BAUD = <span class=\"number\">0X00</span>;</span><br><span class=\"line\">    U1GCR |= <span class=\"number\">0X11</span>; </span><br><span class=\"line\">\t<span class=\"comment\">// SPI Master Mode</span></span><br><span class=\"line\">    U1CSR &amp;= ~<span class=\"number\">0XA0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 配置时钟极性、时钟相位、Bit顺序</span></span><br><span class=\"line\">    U1GCR &amp;= ~<span class=\"number\">0XC0</span>;</span><br><span class=\"line\">    U1GCR |= <span class=\"number\">0X20</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lcd.c</span></span><br><span class=\"line\"><span class=\"comment\">// lcd写入命令</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LCD_Writ_Bus</span><span class=\"params\">(u8 dat)</span> </span>&#123;</span><br><span class=\"line\">    U1DBUF = dat;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!U1TX_BYTE);</span><br><span class=\"line\">    U1TX_BYTE = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.-i2c-一带多\">3. I2C 一带多<a title=\"#3.-i2c-一带多\" href=\"#3.-i2c-一带多\"></a></h3>\n<h4 id=\"i2c连接\">I2C连接<a title=\"#i2c连接\" href=\"#i2c连接\"></a></h4>\n<ol>\n<li>I2C总线组成“线与”的关系，任何一个器件都可以拉低电平。</li>\n<li>I2C总线可以并联多个器件。</li>\n<li>I2C总线有起始信号、数据传输和停止信号。</li>\n</ol>\n<h4 id=\"i2c协议及时序图\">I2C协议及时序图<a title=\"#i2c协议及时序图\" href=\"#i2c协议及时序图\"></a></h4>\n<ul>\n<li><strong>起始信号</strong>: SCL为高电平期间，SDA由高电平向低电平变化产生一个下降沿</li>\n<li><strong>数据传输</strong>:<br>\n– MSB first<br>\n– SCL是低电平，才可以改变数据线SDA，输出要发送的数据的一位<br>\n– SCL在高电平的时候，SDA绝对不可以变化<br>\n– 每个字节跟了一个<strong>应答位</strong>(拉低SDA即输出“0”)</li>\n<li><strong>停止信号</strong>: SCL为高电平期间，SDA由低电平向高电平变化产生一个上升沿</li>\n</ul>\n<div><image style='width:50%' src='https://blog1-1251959181.file.myqcloud.com/cc2530/cc2530_I2C.png' /></div>\n<h4 id=\"i2c地址及点名字节\">I2C地址及点名字节<a title=\"#i2c地址及点名字节\" href=\"#i2c地址及点名字节\"></a></h4>\n<p>I2C寻址示例</p>\n<ul>\n<li>我们板子上使用的I2C器件是AT24C02，是一个容量大小是2Kbits，即256个字节的EEPROM</li>\n<li>根据电路图，7位地址是0b 1010 001 = 0x51</li>\n<li>用I2C的协议来寻址(即上图中的24C02) ，应该收到ACK(低电平)；查询地址0x62的器件，应收到NoACK(高电平)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">I2cStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">IO_DIR_PORT_PIN</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, IO_OUT);</span><br><span class=\"line\">    SDA=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">    SCL=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();<span class=\"comment\">//建立时间是SDA保持时间&gt;4.7us</span></span><br><span class=\"line\">    SDA=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();<span class=\"comment\">//保持时间是&gt;4us</span></span><br><span class=\"line\">    SCL=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">I2cStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">IO_DIR_PORT_PIN</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, IO_OUT);</span><br><span class=\"line\">    SDA=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">    SCL=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();<span class=\"comment\">//保持时间是&gt;4us</span></span><br><span class=\"line\">    SDA=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// I2C寻址函数，即检查地址为addr的器件是否存在，返回值-从器件应答值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">I2CAddressing</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> addr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> ack;</span><br><span class=\"line\">    <span class=\"built_in\">I2cStart</span>(); <span class=\"comment\">//产生起始位，即启动一次总线操作</span></span><br><span class=\"line\">    ack = <span class=\"built_in\">I2cSendByte</span>(addr&lt;&lt;<span class=\"number\">1</span>); <span class=\"comment\">//器件地址需左移一位，因寻址命令的最低位</span></span><br><span class=\"line\">    <span class=\"comment\">//为读写位，用于表示之后的操作是读或写</span></span><br><span class=\"line\">    <span class=\"built_in\">I2cStop</span>(); <span class=\"comment\">//不需进行后续读写，而直接停止本次总线操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ack;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">I2cSendByte</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> dat)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;<span class=\"comment\">//最大255。</span></span><br><span class=\"line\">    <span class=\"built_in\">IO_DIR_PORT_PIN</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, IO_OUT);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(a=<span class=\"number\">0</span>;a&lt;<span class=\"number\">8</span>;a++)<span class=\"comment\">//要发送8位，从最高位开始</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SDA=dat&gt;&gt;<span class=\"number\">7</span>; <span class=\"comment\">//起始信号之后SCL=0，所以可以直接改变SDA信号</span></span><br><span class=\"line\">        dat=dat&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">        SCL=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Delay10us</span>();<span class=\"comment\">//建立时间&gt;4.7us</span></span><br><span class=\"line\">        SCL=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Delay10us</span>();<span class=\"comment\">//时间大于4us</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SDA=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">    <span class=\"built_in\">IO_DIR_PORT_PIN</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, IO_IN);</span><br><span class=\"line\">    SCL=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(SDA)<span class=\"comment\">//如果超过2000us没有应答发送失败，或者为非应答，表示接收结束</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&gt;<span class=\"number\">200</span>) <span class=\"comment\">//如果超过2000us没有应答发送失败，或者为非应答，表示接收结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SCL=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//演示用，实际代码返回0，表示ACK Failed</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SCL=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Delay10us</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">//演示用，实际代码返回1，表示ACK SUCCESS</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCL P1_0 <span class=\"comment\">//I2C时钟</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDA P1_1 <span class=\"comment\">//I2C数据线</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> ack;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">InitIO</span>(); <span class=\"comment\">//SCL，SDA设为输出</span></span><br><span class=\"line\">    <span class=\"built_in\">InitUART0</span>(); <span class=\"comment\">//初始化串口</span></span><br><span class=\"line\">    ack = <span class=\"built_in\">I2CAddressing</span>(<span class=\"number\">0x51</span>); <span class=\"comment\">//查询地址为0x50的器件</span></span><br><span class=\"line\">    str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;5&#x27;</span>; <span class=\"comment\">//将地址和应答值转换为字符串</span></span><br><span class=\"line\">    str[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">3</span>] = ack + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">UartTX_Send_String</span>(str,<span class=\"number\">5</span>); <span class=\"comment\">//串口打印</span></span><br><span class=\"line\">    ack = <span class=\"built_in\">I2CAddressing</span>(<span class=\"number\">0x62</span>); <span class=\"comment\">//查询地址为0x62的器件</span></span><br><span class=\"line\">    str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;6&#x27;</span>; <span class=\"comment\">//将地址和应答值转换为字符串</span></span><br><span class=\"line\">    str[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">3</span>] = ack + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">UartTX_Send_String</span>(str,<span class=\"number\">5</span>); <span class=\"comment\">//串口打印</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- 必考 给时序图用GPIO模拟 I2C的start信号 -->\n<h4 id=\"&lt;text-class='red'&gt;gpio模拟i2c编程&lt;/text&gt;\"><text class='red'>GPIO模拟I2C编程</text><a title=\"#&lt;text-class='red'&gt;gpio模拟i2c编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;gpio模拟i2c编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">UartTX_Send_String</span><span class=\"params\">(<span class=\"type\">char</span> *Data,<span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">        U0DBUF = *Data++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(UTX0IF == <span class=\"number\">0</span>);</span><br><span class=\"line\">        UTX0IF = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    U0DBUF = <span class=\"number\">0x0A</span>;   <span class=\"comment\">// 换行</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(UTX0IF == <span class=\"number\">0</span>);</span><br><span class=\"line\">    UTX0IF = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-5.-adc-模拟/数字转换\">Chpt 5. ADC 模拟/数字转换<a title=\"#chpt-5.-adc-模拟/数字转换\" href=\"#chpt-5.-adc-模拟/数字转换\"></a></h2>\n<h3 id=\"1.-adc概念\">1. ADC概念<a title=\"#1.-adc概念\" href=\"#1.-adc概念\"></a></h3>\n<h4 id=\"adc定义\">ADC定义<a title=\"#adc定义\" href=\"#adc定义\"></a></h4>\n<p>模拟/数字转换(Analog to Digital Converter，简称ADC)是将输入的模拟信号转换为数字信号。</p>\n<h4 id=\"单端输入/差分输入\">单端输入/差分输入<a title=\"#单端输入/差分输入\" href=\"#单端输入/差分输入\"></a></h4>\n<ul>\n<li>对于CC2530的ADC模块，端口P0引脚可以配置为ADC输入端，依次为AIN0～AIN7。可以把输入配置为单端或差分输入。</li>\n<li>在选择差分输入的情况下，差分输入包括输入对AIN0-AIN1、AIN2-AIN3、AIN4-AIN5和AIN6-AIN7。</li>\n<li>差分输入方式比单端输入来说，有更强的抗干扰能力:\n<ul>\n<li>单端输入信号时，如果一线上发生干扰变化，比如幅度增大5mv，GND不变，测到的数据会有偏差；</li>\n<li>而差分信号输入时，当外界存在干扰信号时，只要布线合理，大都同时被耦合到两条线上，幅度增大5mv会同时增大5mv，而接收端关心的只是两个信号的差值，所以外界的这种共模噪声可以被完全抵消掉。由于两根信号的极性相反，它们对外辐射的电磁场可以相互抵消，有效的抑制释放到外界的电磁能量。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"参考电压\">参考电压<a title=\"#参考电压\" href=\"#参考电压\"></a></h4>\n<p>参考电压可选内部或者外部。对于不同厂家的ADC转换，主要修改APCFG和ADCCON3的值，实现程序代码的移植性和通用性。</p>\n<h3 id=\"2.-cc2530的adc编程\">2. CC2530的ADC编程<a title=\"#2.-cc2530的adc编程\" href=\"#2.-cc2530的adc编程\"></a></h3>\n<h4 id=\"adc相关sfr\">ADC相关SFR<a title=\"#adc相关sfr\" href=\"#adc相关sfr\"></a></h4>\n<p>TODO</p>\n<h4 id=\"&lt;text-class='red'&gt;cc2530的adc编程&lt;/text&gt;\"><text class='red'>CC2530的ADC编程</text><a title=\"#&lt;text-class='red'&gt;cc2530的adc编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;cc2530的adc编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ADC中断服务函数示例</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = ADC_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">ADC_ISR</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> num; <span class=\"type\">char</span> temp[<span class=\"number\">2</span>]; uint adc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    temp[<span class=\"number\">1</span>] = ADCL;</span><br><span class=\"line\">    temp[<span class=\"number\">0</span>] = ADCH;</span><br><span class=\"line\">    adc |= (uint)temp[<span class=\"number\">1</span>];</span><br><span class=\"line\">    adc |= ( (uint) temp[<span class=\"number\">0</span>] )&lt;&lt;<span class=\"number\">8</span>;</span><br><span class=\"line\">    adc &gt;&gt;= <span class=\"number\">2</span>; <span class=\"comment\">// ADCL[1:0]没用使用</span></span><br><span class=\"line\">    num = adc*<span class=\"number\">1.25</span>/<span class=\"number\">8192</span>;<span class=\"comment\">//参考电压为1.25V,12位有效位</span></span><br><span class=\"line\">    adcdata[<span class=\"number\">1</span>] = (<span class=\"type\">char</span>)(num)%<span class=\"number\">10</span>+<span class=\"number\">48</span>;</span><br><span class=\"line\">    adcdata[<span class=\"number\">3</span>] = (<span class=\"type\">char</span>)(num*<span class=\"number\">10</span>)%<span class=\"number\">10</span>+<span class=\"number\">48</span>;</span><br><span class=\"line\">    adcComplete1 = <span class=\"number\">1</span>; <span class=\"comment\">//设置转换完成的全局变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"adc分辨率与精确度\">ADC分辨率与精确度<a title=\"#adc分辨率与精确度\" href=\"#adc分辨率与精确度\"></a></h4>\n<p>ADC分辨率由数字化输入信号时所使用的比特数决定。对于16位器件，总电压范围被表示为216 (65536)个独立的数字值或输出代码。因此，系统可以测量的绝对最小电平表示为1比特，或ADC电压范围的1/65536。<br>\nA/D转换器的精确度是指对于给定模拟输入，实际数字输出与理论预期数字输出之间的接近度。换而言之，转换器的精确度决定了数字输出代码中有多少个比特表示有关输入信号的有用信息。<br>\n如前所述，对于16位ADC分辨率，由于出现内部或外部误差源，实际的精确度可能远小于分辨率。因此，举例而言，一个给定的16位ADC可能只能提供12位的精确度。对于这种情况，4LSb(最低有效位)表示ADC中生成的随机噪声。</p>\n<h4 id=\"adc值与电压值的转换关系\">ADC值与电压值的转换关系<a title=\"#adc值与电压值的转换关系\" href=\"#adc值与电压值的转换关系\"></a></h4>\n<p>电压计算公式 = ADC / 精度 × 参考电压。<br>\nValue = (ADCH × 256 + ADCL) × 3.3 / 8192</p>\n<h2 id=\"chpt-6.-pwm-脉冲宽度调制\">Chpt 6. PWM 脉冲宽度调制<a title=\"#chpt-6.-pwm-脉冲宽度调制\" href=\"#chpt-6.-pwm-脉冲宽度调制\"></a></h2>\n<h3 id=\"1.-pwm概念\">1. PWM概念<a title=\"#1.-pwm概念\" href=\"#1.-pwm概念\"></a></h3>\n<h4 id=\"pwm定义\">PWM定义<a title=\"#pwm定义\" href=\"#pwm定义\"></a></h4>\n<p>脉冲宽度调制(Pulse Width Modulation，PWM)是利用微处理器的数字输出对模拟电路进行控制的一种非常有效的技术，广泛应用于从测量、通信到功率控制与变换等许多领域中。</p>\n<h4 id=\"占空比的概念\">占空比的概念<a title=\"#占空比的概念\" href=\"#占空比的概念\"></a></h4>\n<p>占空比(正占空比，duty cycle)是指脉冲信号的通电时间与通电周期之比，即高电平的时间占整个周期的比例。</p>\n<h4 id=\"pwm实现的三种方式\">PWM实现的三种方式<a title=\"#pwm实现的三种方式\" href=\"#pwm实现的三种方式\"></a></h4>\n<ol>\n<li>模拟方<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">     LED=<span class=\"number\">1</span>; <span class=\"built_in\">delay</span>(cycle*dutycycle);</span><br><span class=\"line\">     LED=<span class=\"number\">0</span>; <span class=\"built_in\">delay</span>(cycle* ( <span class=\"number\">1</span>-dutycycle));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>定时器的定时中断方式(溢出中断)<br>\nled=1;<br>\n定时cycle<em>dutycycle，定时中断发生时led=0;<br>\n再定时cycle</em>( 1-dutycycle),定时中断发生时led=1;</li>\n<li>定时器的比较输出(output compare)方式<br>\nTimer1/Timer3/Timer4的output compare模式</li>\n</ol>\n<h3 id=\"2.-cc2530的pwm编程\">2. CC2530的PWM编程<a title=\"#2.-cc2530的pwm编程\" href=\"#2.-cc2530的pwm编程\"></a></h3>\n<h4 id=\"timer1的-output-compare-相关sfr\">Timer1的 output compare 相关SFR<a title=\"#timer1的-output-compare-相关sfr\" href=\"#timer1的-output-compare-相关sfr\"></a></h4>\n<p>TODO</p>\n<h4 id=\"使用timer比较输出实pwm的一般步骤\">使用Timer比较输出实PWM的一般步骤<a title=\"#使用timer比较输出实pwm的一般步骤\" href=\"#使用timer比较输出实pwm的一般步骤\"></a></h4>\n<ol>\n<li>确定Timer及通道，配置输出引脚\n<ul>\n<li>Timer1?</li>\n<li>Timer3?</li>\n<li>Timer4?</li>\n<li>Channel?</li>\n</ul>\n</li>\n<li>配置Timer的工作模式和计数值上限\n<ul>\n<li>FreeRunning?</li>\n<li>Modulo?</li>\n<li>Up/Down?</li>\n<li>TxCC0 – 计算值上限</li>\n</ul>\n</li>\n<li>使能Timer通道的比较输出功能，配置通道的比较值\n<ul>\n<li>配置TxCCTLy，TxCCyH和TxCCyL</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"&lt;text-class='red'&gt;timer1比较输出模式实现pwm的编程(模模式)&lt;/text&gt;\"><text class='red'>Timer1比较输出模式实现PWM的编程(模模式)</text><a title=\"#&lt;text-class='red'&gt;timer1比较输出模式实现pwm的编程(模模式)&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;timer1比较输出模式实现pwm的编程(模模式)&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用比较输出方式控制LED1（P0_5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ioCC2530.h“</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">void Timer1_Init(void) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    T1CC0L = 0xC8; T1CC0H = 0x00;   //设置T1CC0,PWM输出时比较值上限</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    T1CCTL3 = 0x34;                 //设置T1输出的通道3，比较输出模式6，不中断</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    T1CC3L = 0x0A; T1CC3H = 0x00;   //设置T1输出通道3比较输出值</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    T1CTL = 0x0E;                   //配置分频系数和工作模式：模模式</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">void main(void) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    CLKCONCMD &amp;= 0x80;  // 32Mhz主频</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    PERCFG &amp;= ~0x40;    // T1 location=1</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    P2DIR |= 0xC0;      //第1优先级：定时器1通道2-3</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    P0SEL |= 0x20;      //设置P0.5为外设功能</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    P0DIR |= 0x20;      //设置P0.5为输出方向</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    Timer1_Init();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">    while(1);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&#125;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-7.-看门狗-wd\">Chpt 7. 看门狗 WD<a title=\"#chpt-7.-看门狗-wd\" href=\"#chpt-7.-看门狗-wd\"></a></h2>\n<h3 id=\"1.-wdt概念\">1. WDT概念<a title=\"#1.-wdt概念\" href=\"#1.-wdt概念\"></a></h3>\n<h4 id=\"看门狗定义\">看门狗定义<a title=\"#看门狗定义\" href=\"#看门狗定义\"></a></h4>\n<p>看门狗(Watch Dog Timer， WDT)是一种专门用于监测单片机程序运行状态的芯片组件。<br>\n其实质是一个计数器，一般给看门狗一个大数，程序开始运行后，看门狗开始倒计数。<br>\n如果程序运行正常，过一段时间CPU应发出指令让看门狗复位，重新开始倒计数。<br>\n如果看门狗减到0，就认为程序没有正常工作，将强制整个系统复位。</p>\n<h4 id=\"看门狗的功能\">看门狗的功能<a title=\"#看门狗的功能\" href=\"#看门狗的功能\"></a></h4>\n<p>看门狗是在程序<strong>跑飞</strong>的情况下，将CPU自恢复的一种方式，当软件在选定的时间间隔内不能置位看门狗定时器，看门狗就复位系统。<br>\n看门狗可用于电噪声、电源故障或静电放电等恶劣工作环境或高可靠性要求的环境。<br>\n如果系统不需要应用看门狗，则看门狗定时器可配置成间隔定时器，在选定时间间隔内产生中断。</p>\n<h3 id=\"2.-cc2530的wdt编程\">2. CC2530的WDT编程<a title=\"#2.-cc2530的wdt编程\" href=\"#2.-cc2530的wdt编程\"></a></h3>\n<h4 id=\"cc2530的时钟源切换\">CC2530的时钟源切换<a title=\"#cc2530的时钟源切换\" href=\"#cc2530的时钟源切换\"></a></h4>\n<p>CLKCONCMD.OSC寄存器位用于选择主系统时钟的源。<br>\nCLKCONCMD.OSC32K寄存器位用于选择32kHz 时钟源改变CLKCONCMD.OSC 位不会立即改变系统时钟。时钟源的改变当在CLKCONSTA.OSC =CLKCONCMD.OSC时生效。这是因为在实际改变时钟源之前需要有稳定的时钟。<br>\nCLKCONCMD.CLKSPD 位反映系统时钟的频率，因此是CLKCONCMD.OSC 位的映像。选择32MHz XOSC且稳定之后，即当CLKCONSTA.OSC 位从1 变为0时，16MHz RC振荡器就被校准。<br>\n从16 MHz时钟变到32MHz时钟源（反之亦然）与CLKCONCMD.TICKSPD 的设置一致。<br>\n当CLKCONCMD.OSC 改变时，较慢的CLKCONCMD.TICKSPD 设置会导致实际源改变生效的时间较长。最快的转换是当CLKCONCMD.TICKSPD 等于000 时。</p>\n<h4 id=\"wdt相关sfr\">WDT相关SFR<a title=\"#wdt相关sfr\" href=\"#wdt相关sfr\"></a></h4>\n<p>CC2530看门狗控制寄存器WDCTL</p>\n<p>时钟控制命令寄存器CLKCONCMD</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">位</th>\n<th style=\"text-align:center\">位名称</th>\n<th style=\"text-align:center\">复位值</th>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">OSC 32K</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">32kHz时钟振荡器选择。CLKCONSTA.OSC32K反映当前的设置。当要改变该位必须选择16MHz RCOSC作为系统时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">OSC</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">系统时钟源选择。设置该位只能发起一个时钟源改变。CLKCONSTA.OSC反映当前的设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5:3</td>\n<td style=\"text-align:center\">TICKSPD[2:0]</td>\n<td style=\"text-align:center\">001</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">定时器标记输出设置。不能高于通过OSC位设置的时钟设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1:0</td>\n<td style=\"text-align:center\">CLKSPD</td>\n<td style=\"text-align:center\">001</td>\n<td style=\"text-align:center\">R/W</td>\n<td style=\"text-align:center\">时钟速度。不能高于通过OSC位设置的系统时钟设置。表示当前的系统时钟频率</td>\n</tr>\n</tbody>\n</table></div></div><p>时钟控制状态寄存器CLKCONSTA</p>\n<h4 id=\"wdt定时器工作模式\">WDT定时器工作模式<a title=\"#wdt定时器工作模式\" href=\"#wdt定时器工作模式\"></a></h4>\n<p>CC2530的看门狗定时器可工作于定时器模式或看门狗模式。<br>\n要在一般定时器模式下设置看门狗定时器，必须把WDCTL.MODE[1:0]位设置为11。<br>\n要设置看门狗定时器工作于看门狗模式，必须设置WDCTL.MODE[1:0]位为10</p>\n<p>要在一般定时器模式下设置看门狗定时器，必须把WDCTL.MODE[1:0]位设置为11。此时，看门狗定时器就开始工作，且计数器从0开始递增。当计数器达到选定间隔值时，CPU将IRCON2.WDTIF置1。<br>\n如果IEN2.WDTIE=1且IEN0.EA=1，则定时器将产生一个中断请求（IRCON2.WDTIF/IEN2.WDTIE）。<br>\n在定时器模式下，可以通过写入1 到WDCTL.CLR[0]来清除定时器内容。当定时器被清除后，计数器的内容就置为0。<br>\n写入00 或01 到WDCTL.MODE[1:0]可停止定时器，并对其清零。<br>\n定时器间隔由WDCTL.INT[1:0]位设置。在定时器操作期间，定时器间隔不能改变，且当定时器开始时必须设置。在定时器模式下，当达到定时器间隔时，不会产生复位。<br>\n注意：如果选择了看门狗模式，定时器模式不能在芯片复位之前选择。<br>\n看门狗定时器是一个15位计数器，其内容是用户无法读取的(not user-accessible)。<br>\n看门狗定时器运行于一个频率为32.768kHz（当使用32kHz XOSC）的看门狗定时器时钟上。这个时钟频率的超时期限为1.9ms、15.625ms、0.25s 和1s，分别对应64、512、8192 和32768 的计数值设置。</p>\n<h4 id=\"&lt;text-class='red'&gt;wdt的看门狗工作模式编程&lt;/text&gt;\"><text class='red'>WDT的看门狗工作模式编程</text><a title=\"#&lt;text-class='red'&gt;wdt的看门狗工作模式编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;wdt的看门狗工作模式编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在看门狗模式下实现LED闪烁周期1s的自动复位功能。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">systemClock_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">led_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">watchdog_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">30000</span>); <span class=\"comment\">//延时小于1s。若大于1秒，会出现什么情况?</span></span><br><span class=\"line\">    LED1 =<span class=\"number\">1</span>; <span class=\"comment\">//亮LED1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">FeedWD</span>(); <span class=\"comment\">//喂狗指令（加入后系统不复位，小灯不闪烁；若注释，则系统不断复位，LED每隔1s闪烁一次）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-8.-pm\">Chpt 8. PM<a title=\"#chpt-8.-pm\" href=\"#chpt-8.-pm\"></a></h2>\n<h3 id=\"1.-cc2530的低功耗管理\">1. CC2530的低功耗管理<a title=\"#1.-cc2530的低功耗管理\" href=\"#1.-cc2530的低功耗管理\"></a></h3>\n<h4 id=\"cc2530的5种供电模式\">CC2530的5种供电模式<a title=\"#cc2530的5种供电模式\" href=\"#cc2530的5种供电模式\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">主动模式</td>\n<td style=\"text-align:center\">完全清醒</td>\n<td style=\"text-align:center\">完全功能模式。稳压器的数字内核开启，16MHz RC振荡器或32MHz晶体振荡器运行，或者两者都运行。32kHz RCOSC振荡器或32kHz XOSC运行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">空闲模式</td>\n<td style=\"text-align:center\">清醒，但CPU内核停止运行</td>\n<td style=\"text-align:center\">除CPU内核停止运行(即空闲外)，其他功能和主动模式一样。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PM1</td>\n<td style=\"text-align:center\">有点瞌睡</td>\n<td style=\"text-align:center\">高频晶振(16MHz或32MHz)关闭，低频晶振(32.768kHz RCOSC/XOSC)工作，数字核心模块正常工作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PM2</td>\n<td style=\"text-align:center\">半醒半睡</td>\n<td style=\"text-align:center\">低频晶振(32.768KHz RCOSC/XOSC)工作, 数字核心模块关闭，系统通过RESET,外部中断或睡眠计数器溢出唤醒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PM3</td>\n<td style=\"text-align:center\">睡的很死</td>\n<td style=\"text-align:center\">晶振全部关闭，数字核心模块关闭，系统只能通过RESET或外部中断唤醒。</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"电源管理相关sfr\">电源管理相关SFR<a title=\"#电源管理相关sfr\" href=\"#电源管理相关sfr\"></a></h4>\n<p>CC2530电源管理寄存器有：</p>\n<ul>\n<li>供电模式控制寄存器PCON、</li>\n<li>睡眠模式控制寄存器SLEEPCMD、</li>\n<li>睡眠计数器STx</li>\n</ul>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">寄存器</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PCON（0x87）</td>\n<td style=\"text-align:center\">供电模式控制</td>\n<td style=\"text-align:center\">Bit[0]供电模式控制。写1到该位强制设备进入SLEEP.MODE（注意MODE=0x00且IDLE=1将停止CPU内核活动）设置的供电模式。该位读出来一直是0。当活动时，所有的使能中断将清除位，设备将重新进入主动模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SLEEPCMD（0xBE）</td>\n<td style=\"text-align:center\">睡眠模式控制</td>\n<td style=\"text-align:center\">Bit[1:0]供电模式设置。00:主动/空闲模式；01:供电模式1；10:供电模式2； 11:供电模式3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ST0</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">睡眠计数器数据Bit[7:0]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ST1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">睡眠计数器数据Bit[15:8]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ST2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">睡眠计数器数据Bit[23:16]</td>\n</tr>\n</tbody>\n</table></div></div><p>在进入PM2或PM3时，所有寄存器位保留它们之前的值。</p>\n<h4 id=\"cc2530功耗模式设置和切换\">CC2530功耗模式设置和切换<a title=\"#cc2530功耗模式设置和切换\" href=\"#cc2530功耗模式设置和切换\"></a></h4>\n<p><strong>功耗模式设置</strong></p>\n<p>系统上电默认运行在主动模式，要进入低功耗运行，除需通过睡眠模式控制寄存器SLEEPCMD.MODE[1:0]进行设定外，还要通过对供电模式寄存器PCON.IDLE位写入1使设备强制进入睡眠模式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空闲模式（供电模式0）</span></span><br><span class=\"line\">SLEEPCMD &amp;=～ <span class=\"number\">0x03</span>;</span><br><span class=\"line\">PCON |= <span class=\"number\">0x01</span>;</span><br><span class=\"line\"><span class=\"comment\">// PM1（供电模式1）</span></span><br><span class=\"line\">SLEEPCMD &amp;=～ <span class=\"number\">0x03</span>;</span><br><span class=\"line\">SLEEPCMD |= <span class=\"number\">0x01</span>;</span><br><span class=\"line\">PCON |= <span class=\"number\">0x01</span>;</span><br><span class=\"line\"><span class=\"comment\">// PM2（供电模式2）</span></span><br><span class=\"line\">SLEEPCMD &amp;=～ <span class=\"number\">0x03</span>;</span><br><span class=\"line\">SLEEPCMD |= <span class=\"number\">0x02</span>;</span><br><span class=\"line\">PCON |= <span class=\"number\">0x01</span>;</span><br><span class=\"line\"><span class=\"comment\">// PM3（供电模式3）</span></span><br><span class=\"line\">SLEEPCMD |=<span class=\"number\">0x03</span>;</span><br><span class=\"line\">PCON |= <span class=\"number\">0x01</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>低功耗运行模式切换</strong></p>\n<ul>\n<li>任何使能的中断都可以使系统从空闲状态唤醒到主动状态；</li>\n<li>PM1、PM2唤醒到主动/空闲模式，有3种方式：复位、外部中断、睡眠定时器中断；</li>\n<li>但把PM3唤醒到PM0，只有两种方式：复位、外部中断（因为在PM3下，所有振荡器均停止工作，睡眠定时器自然也是休眠的）。</li>\n</ul>\n<div><image style='width:60%' src='cc2530/cc2530_pm.png' /></div>\n<h4 id=\"&lt;text-class='red'&gt;睡眠定时器配置及从pm1/pm2唤醒编程&lt;/text&gt;\"><text class='red'>睡眠定时器配置及从PM1/PM2唤醒编程</text><a title=\"#&lt;text-class='red'&gt;睡眠定时器配置及从pm1/pm2唤醒编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;睡眠定时器配置及从pm1/pm2唤醒编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化休眠定时器,设定后经过指定时间自行唤醒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitSleepTimer</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    ST2 = <span class=\"number\">0X00</span>;</span><br><span class=\"line\">    ST1 = <span class=\"number\">0X0F</span>;</span><br><span class=\"line\">    ST0 = <span class=\"number\">0X0F</span>;</span><br><span class=\"line\">    EA = <span class=\"number\">1</span>; <span class=\"comment\">//开中断</span></span><br><span class=\"line\">    STIE = <span class=\"number\">1</span>; <span class=\"comment\">//睡眠定时器中断使能0： 中断禁止1： 中断使能</span></span><br><span class=\"line\">    STIF = <span class=\"number\">0</span>; <span class=\"comment\">//睡眠定时器中断标志0： 无中断未决1： 中断未决</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置睡眠时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Set_ST_Period</span><span class=\"params\">(uint sec)</span> </span>&#123;</span><br><span class=\"line\">    ulong sleepTimer = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sleepTimer |= ST0;</span><br><span class=\"line\">    sleepTimer |= (ulong)ST1 &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    sleepTimer |= (ulong)ST2 &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    sleepTimer += ((ulong)sec * (ulong)<span class=\"number\">32768</span>);</span><br><span class=\"line\">    ST2 = (uchar)(sleepTimer &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    ST1 = (uchar)(sleepTimer &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    ST0 = (uchar) sleepTimer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置系统工作模式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SysPowerMode</span><span class=\"params\">(uchar mode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mode &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        SLEEPCMD |= mode; <span class=\"comment\">//设置系统睡眠模式</span></span><br><span class=\"line\">        PCON = <span class=\"number\">0x01</span>; <span class=\"comment\">//进入睡眠模式,通过中断唤醒</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        PCON = <span class=\"number\">0x00</span>; <span class=\"comment\">//通过中断唤醒系统</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = ST_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">ST_ISR</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    STIF = <span class=\"number\">0</span>; <span class=\"comment\">//清标志位</span></span><br><span class=\"line\">    <span class=\"built_in\">SysPowerMode</span>(<span class=\"number\">4</span>); <span class=\"comment\">//进入正常工作模式</span></span><br><span class=\"line\">    LED2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    uchar i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">InitLed</span>(); <span class=\"comment\">//设置LED灯相应的IO口</span></span><br><span class=\"line\">    <span class=\"built_in\">InitSleepTimer</span>(); <span class=\"comment\">//初始化休眠定时器</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">6</span>; i++) &#123; <span class=\"comment\">//LED1闪烁3次，进入睡眠</span></span><br><span class=\"line\">            LED1 = ~LED1;</span><br><span class=\"line\">            <span class=\"built_in\">DelayMS</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">Set_ST_Period</span>(<span class=\"number\">5</span>); <span class=\"comment\">//设置睡眠时间为5秒</span></span><br><span class=\"line\">        LED2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">SysPowerMode</span>(<span class=\"number\">2</span>); <span class=\"comment\">//进入睡眠模式PM2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"&lt;text-class='red'&gt;外部按键中断从pm3唤醒编程&lt;/text&gt;\"><text class='red'>外部按键中断从PM3唤醒编程</text><a title=\"#&lt;text-class='red'&gt;外部按键中断从pm3唤醒编程&lt;/text&gt;\" href=\"#&lt;text-class='red'&gt;外部按键中断从pm3唤醒编程&lt;/text&gt;\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LED控制I/O口初始化函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init_IO_AND_LED</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    P0DIR |= <span class=\"number\">0Xe0</span>;  <span class=\"comment\">// P0.5,P0.6 输出</span></span><br><span class=\"line\">    LED1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    LED2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    LED3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    P0SEL &amp;= ~<span class=\"number\">0x10</span>; <span class=\"comment\">// 设置P0.4为普通IO口</span></span><br><span class=\"line\">    P0DIR &amp;= ~<span class=\"number\">0x10</span>; <span class=\"comment\">// 按键接在P0.4口上，设P0.4为输入模式</span></span><br><span class=\"line\">    P0INP &amp;= ~<span class=\"number\">0x10</span>; <span class=\"comment\">// 打开P0.4上拉电阻</span></span><br><span class=\"line\">    P0IEN |= <span class=\"number\">0x10</span>;  <span class=\"comment\">// P0.4 设置为中断方式</span></span><br><span class=\"line\">    PICTL |= <span class=\"number\">0x01</span>;  <span class=\"comment\">// 下降沿触发</span></span><br><span class=\"line\">    IEN1 |= <span class=\"number\">0xff</span>;   <span class=\"comment\">// 允许P0口中断;</span></span><br><span class=\"line\">    P0IFG = <span class=\"number\">0x00</span>;   <span class=\"comment\">// 初始化中断标志位</span></span><br><span class=\"line\">    EA = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 系统工作模式选择函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SysPowerMode</span><span class=\"params\">(uchar mode)</span> </span>&#123;</span><br><span class=\"line\">    uchar i,j;</span><br><span class=\"line\">    i = mode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mode&lt;<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        SLEEPCMD &amp;= <span class=\"number\">0xFC</span>;</span><br><span class=\"line\">        SLEEPCMD |= i; <span class=\"comment\">//设置系统睡眠模式</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++);</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            PCON = <span class=\"number\">0x01</span>; <span class=\"comment\">//进入睡眠模式</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        PCON = <span class=\"number\">0x00</span>; <span class=\"comment\">//系统唤醒</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中断处理函数-系统唤醒</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> vector = P0INT_VECTOR</span></span><br><span class=\"line\"><span class=\"function\">__interrupt <span class=\"type\">void</span> <span class=\"title\">P0_ISR</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P0IFG&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        P0IFG = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    P0IF = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">SysPowerMode</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    uchar count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Init_IO_AND_LED</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            LED1 = <span class=\"number\">1</span>; <span class=\"comment\">//开LED1，系统工作指示</span></span><br><span class=\"line\">            LED2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"built_in\">Delay</span>(); <span class=\"comment\">//延时函数</span></span><br><span class=\"line\">        LED2 = !LED2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            LED1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">SysPowerMode</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">            <span class=\"comment\">//3次闪烁后进入睡眠状态PM3</span></span><br><span class=\"line\">            LED1 = <span class=\"number\">1</span>; <span class=\"comment\">// 在PM3下看不到点亮！！！因为睡眠了</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"chpt-9.-直接内存访问-dma\">Chpt 9. 直接内存访问 DMA<a title=\"#chpt-9.-直接内存访问-dma\" href=\"#chpt-9.-直接内存访问-dma\"></a></h2>\n<h3 id=\"1.-cc2530的dma操作\">1. CC2530的DMA操作<a title=\"#1.-cc2530的dma操作\" href=\"#1.-cc2530的dma操作\"></a></h3>\n<h4 id=\"dma定义\">DMA定义<a title=\"#dma定义\" href=\"#dma定义\"></a></h4>\n<p>DMA(“Direct Memory Access”，直接内存访问)是一种不经过CPU而直接从内存存取数据的数据交换模式。在DMA模式下，CPU只须向DMA控制器下达指令，让DMA控制器来处理数据的传送，数据传送完毕再把信息反馈给CPU.</p>\n<h4 id=\"dma的好处\">DMA的好处<a title=\"#dma的好处\" href=\"#dma的好处\"></a></h4>\n<ul>\n<li>减轻了CPU资源占有率，可以大大节省系统资源。</li>\n<li>使用DMA还可以保持CPU在低功耗模式下与外设单元之间传送数据，不需要唤醒，这就降低了整个系统的功耗。</li>\n</ul>\n<p>例如：只需要CPU 极少的干预，DMA 就可以将数据从诸如ADC 或RF 收发器等外设单元传送到存储器，从存储器传送数据到USART，或定期在ADC 和存储器之间传送数据样本，等等。</p>\n<h4 id=\"cc2530配置dma操作的流程\">CC2530配置DMA操作的流程<a title=\"#cc2530配置dma操作的流程\" href=\"#cc2530配置dma操作的流程\"></a></h4>\n<ol>\n<li>配置DMA通道\n<ol>\n<li>DMA 配置数据结构</li>\n<li>DMA 寄存器配置</li>\n</ol>\n</li>\n<li>进入工作状态（ DMA通道通过将DMA 通道工作状态寄存器DMAARM 中指定位置1 ）</li>\n<li>一旦DMA 通道进入工作状态，当配置的DMA 触发事件发生时，传送就开始了。</li>\n</ol>\n","prev":{"title":"北科大毛概整理2019版","link":"2020/01/03/ustb_marx"},"next":{"title":"汇编语言实验","link":"2019/11/10/syl_Assembly_Language"},"plink":"https://vincenteliang.com/2019/12/28/ustb_CC2530/","toc":[{"id":"题型与示例","title":"题型与示例","index":"1","children":[{"id":"单项选择题-(10x2’=20’)","title":"单项选择题 (10x2’&#x3D;20’)","index":"1.1"},{"id":"简答题-(6x5’=30’)","title":"简答题 (6x5’&#x3D;30’)","index":"1.2"},{"id":"程序题-(6’+6’+8’+8’+10’+12’=50’)","title":"程序题 (6’+6’+8’+8’+10’+12’&#x3D;50’)","index":"1.3"}]},{"id":"chpt-1.-绪论","title":"Chpt 1. 绪论","index":"2","children":[{"id":"1.-嵌入式系统概念","title":"1. 嵌入式系统概念","index":"2.1"},{"id":"2.-嵌入式微处理器分类","title":"2. 嵌入式微处理器分类","index":"2.2"},{"id":"3.-嵌入式软件的开发模式","title":"3. 嵌入式软件的开发模式","index":"2.3"}]},{"id":"chpt-2.-单片机基础","title":"Chpt 2. 单片机基础","index":"3","children":[{"id":"1.-单片机基础知识","title":"1. 单片机基础知识","index":"3.1"},{"id":"2.-单片机最小系统:-电源电路、复位电路、晶振电路","title":"2. 单片机最小系统: 电源电路、复位电路、晶振电路","index":"3.2"},{"id":"3.-cc2530编程入门","title":"3. CC2530编程入门","index":"3.3"},{"id":"4.-gpio编程","title":"4. GPIO编程","index":"3.4"}]},{"id":"chpt-3.-外部中断和定时器","title":"Chpt 3. 外部中断和定时器","index":"4","children":[{"id":"1.-中断相关概念","title":"1. 中断相关概念","index":"4.1"},{"id":"2.-cc2530外部中断","title":"2. CC2530外部中断","index":"4.2"},{"id":"3.-cc2530定时器","title":"3. CC2530定时器","index":"4.3"}]},{"id":"chpt-4.-串行通讯协议(uart/spi/i2c)","title":"Chpt 4. 串行通讯协议(UART&#x2F;SPI&#x2F;I2C)","index":"5","children":[{"id":"1.-uart-异步","title":"1. UART 异步","index":"5.1"},{"id":"2.-spi-高速","title":"2. SPI 高速","index":"5.2"},{"id":"3.-i2c-一带多","title":"3. I2C 一带多","index":"5.3"}]},{"id":"chpt-5.-adc-模拟/数字转换","title":"Chpt 5. ADC 模拟&#x2F;数字转换","index":"6","children":[{"id":"1.-adc概念","title":"1. ADC概念","index":"6.1"},{"id":"2.-cc2530的adc编程","title":"2. CC2530的ADC编程","index":"6.2"}]},{"id":"chpt-6.-pwm-脉冲宽度调制","title":"Chpt 6. PWM 脉冲宽度调制","index":"7","children":[{"id":"1.-pwm概念","title":"1. PWM概念","index":"7.1"},{"id":"2.-cc2530的pwm编程","title":"2. CC2530的PWM编程","index":"7.2"}]},{"id":"chpt-7.-看门狗-wd","title":"Chpt 7. 看门狗 WD","index":"8","children":[{"id":"1.-wdt概念","title":"1. WDT概念","index":"8.1"},{"id":"2.-cc2530的wdt编程","title":"2. CC2530的WDT编程","index":"8.2"}]},{"id":"chpt-8.-pm","title":"Chpt 8. PM","index":"9","children":[{"id":"1.-cc2530的低功耗管理","title":"1. CC2530的低功耗管理","index":"9.1"}]},{"id":"chpt-9.-直接内存访问-dma","title":"Chpt 9. 直接内存访问 DMA","index":"10","children":[{"id":"1.-cc2530的dma操作","title":"1. CC2530的DMA操作","index":"10.1"}]}],"reward":true,"copyright":{"author":"Vincente Liang","link":"<a href=\"https://vincenteliang.com/2019/12/28/ustb_CC2530/\" title=\"单片机原理与应用2019\">https://vincenteliang.com/2019/12/28/ustb_CC2530/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"December 29, 2019","updated":"July 1, 2024"},"reading_time":"11739 words in 78 min"}